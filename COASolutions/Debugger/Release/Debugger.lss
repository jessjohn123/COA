
Debugger.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000aa  00800100  00001984  00001a18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001984  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001c0  008001aa  008001aa  00001ac2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001ac2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001af4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000630  00000000  00000000  00001b34  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001842a  00000000  00000000  00002164  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002fc5  00000000  00000000  0001a58e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003564  00000000  00000000  0001d553  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001860  00000000  00000000  00020ab8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003a54  00000000  00000000  00022318  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007cd5  00000000  00000000  00025d6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000920  00000000  00000000  0002da41  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__dtors_end>
       4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
       8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
       c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      10:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      14:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      18:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      1c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      20:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      24:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      28:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      2c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      30:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      34:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      38:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      3c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      40:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__vector_16>
      44:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      48:	0c 94 75 09 	jmp	0x12ea	; 0x12ea <__vector_18>
      4c:	0c 94 a7 09 	jmp	0x134e	; 0x134e <__vector_19>
      50:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      54:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      58:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      5c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      60:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      64:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>

00000068 <__ctors_start>:
      68:	75 00       	.word	0x0075	; ????
      6a:	65 06       	cpc	r6, r21
      6c:	cd 09       	sbc	r28, r13

0000006e <__ctors_end>:
      6e:	79 00       	.word	0x0079	; ????

00000070 <__dtors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d8 e0       	ldi	r29, 0x08	; 8
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	11 e0       	ldi	r17, 0x01	; 1
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	e4 e8       	ldi	r30, 0x84	; 132
      84:	f9 e1       	ldi	r31, 0x19	; 25
      86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0
      8c:	aa 3a       	cpi	r26, 0xAA	; 170
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
      92:	23 e0       	ldi	r18, 0x03	; 3
      94:	aa ea       	ldi	r26, 0xAA	; 170
      96:	b1 e0       	ldi	r27, 0x01	; 1
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	aa 36       	cpi	r26, 0x6A	; 106
      9e:	b2 07       	cpc	r27, r18
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>

000000a2 <__do_global_ctors>:
      a2:	10 e0       	ldi	r17, 0x00	; 0
      a4:	c7 e3       	ldi	r28, 0x37	; 55
      a6:	d0 e0       	ldi	r29, 0x00	; 0
      a8:	04 c0       	rjmp	.+8      	; 0xb2 <__do_global_ctors+0x10>
      aa:	21 97       	sbiw	r28, 0x01	; 1
      ac:	fe 01       	movw	r30, r28
      ae:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <__tablejump2__>
      b2:	c4 33       	cpi	r28, 0x34	; 52
      b4:	d1 07       	cpc	r29, r17
      b6:	c9 f7       	brne	.-14     	; 0xaa <__do_global_ctors+0x8>
      b8:	0e 94 62 00 	call	0xc4	; 0xc4 <main>
      bc:	0c 94 b5 0c 	jmp	0x196a	; 0x196a <__do_global_dtors>

000000c0 <__bad_interrupt>:
      c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c4 <main>:
      c4:	0e 94 31 01 	call	0x262	; 0x262 <init>
      c8:	84 e0       	ldi	r24, 0x04	; 4
      ca:	92 e0       	ldi	r25, 0x02	; 2
      cc:	0e 94 b3 03 	call	0x766	; 0x766 <_ZN14OneSheeldClass5beginEv>
      d0:	6a e0       	ldi	r22, 0x0A	; 10
      d2:	71 e0       	ldi	r23, 0x01	; 1
      d4:	80 eb       	ldi	r24, 0xB0	; 176
      d6:	91 e0       	ldi	r25, 0x01	; 1
      d8:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <_ZN12PrintlnClass7printlnEPKc>
      dc:	68 ee       	ldi	r22, 0xE8	; 232
      de:	73 e0       	ldi	r23, 0x03	; 3
      e0:	80 e0       	ldi	r24, 0x00	; 0
      e2:	90 e0       	ldi	r25, 0x00	; 0
      e4:	0e 94 f6 00 	call	0x1ec	; 0x1ec <delay>
      e8:	f3 cf       	rjmp	.-26     	; 0xd0 <main+0xc>

000000ea <_GLOBAL__sub_I_Terminal>:
      ea:	8a ea       	ldi	r24, 0xAA	; 170
      ec:	91 e0       	ldi	r25, 0x01	; 1
      ee:	0c 94 7c 07 	jmp	0xef8	; 0xef8 <_ZN14TerminalShieldC1Ev>

000000f2 <_GLOBAL__sub_D_Terminal>:
      f2:	08 95       	ret

000000f4 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
      f4:	1f 92       	push	r1
      f6:	0f 92       	push	r0
      f8:	0f b6       	in	r0, 0x3f	; 63
      fa:	0f 92       	push	r0
      fc:	11 24       	eor	r1, r1
      fe:	2f 93       	push	r18
     100:	3f 93       	push	r19
     102:	8f 93       	push	r24
     104:	9f 93       	push	r25
     106:	af 93       	push	r26
     108:	bf 93       	push	r27
     10a:	80 91 fc 01 	lds	r24, 0x01FC
     10e:	90 91 fd 01 	lds	r25, 0x01FD
     112:	a0 91 fe 01 	lds	r26, 0x01FE
     116:	b0 91 ff 01 	lds	r27, 0x01FF
     11a:	30 91 fb 01 	lds	r19, 0x01FB
     11e:	23 e0       	ldi	r18, 0x03	; 3
     120:	23 0f       	add	r18, r19
     122:	2d 37       	cpi	r18, 0x7D	; 125
     124:	68 f1       	brcs	.+90     	; 0x180 <__vector_16+0x8c>
     126:	26 e8       	ldi	r18, 0x86	; 134
     128:	23 0f       	add	r18, r19
     12a:	02 96       	adiw	r24, 0x02	; 2
     12c:	a1 1d       	adc	r26, r1
     12e:	b1 1d       	adc	r27, r1
     130:	20 93 fb 01 	sts	0x01FB, r18
     134:	80 93 fc 01 	sts	0x01FC, r24
     138:	90 93 fd 01 	sts	0x01FD, r25
     13c:	a0 93 fe 01 	sts	0x01FE, r26
     140:	b0 93 ff 01 	sts	0x01FF, r27
     144:	80 91 00 02 	lds	r24, 0x0200
     148:	90 91 01 02 	lds	r25, 0x0201
     14c:	a0 91 02 02 	lds	r26, 0x0202
     150:	b0 91 03 02 	lds	r27, 0x0203
     154:	01 96       	adiw	r24, 0x01	; 1
     156:	a1 1d       	adc	r26, r1
     158:	b1 1d       	adc	r27, r1
     15a:	80 93 00 02 	sts	0x0200, r24
     15e:	90 93 01 02 	sts	0x0201, r25
     162:	a0 93 02 02 	sts	0x0202, r26
     166:	b0 93 03 02 	sts	0x0203, r27
     16a:	bf 91       	pop	r27
     16c:	af 91       	pop	r26
     16e:	9f 91       	pop	r25
     170:	8f 91       	pop	r24
     172:	3f 91       	pop	r19
     174:	2f 91       	pop	r18
     176:	0f 90       	pop	r0
     178:	0f be       	out	0x3f, r0	; 63
     17a:	0f 90       	pop	r0
     17c:	1f 90       	pop	r1
     17e:	18 95       	reti
     180:	01 96       	adiw	r24, 0x01	; 1
     182:	a1 1d       	adc	r26, r1
     184:	b1 1d       	adc	r27, r1
     186:	d4 cf       	rjmp	.-88     	; 0x130 <__vector_16+0x3c>

00000188 <millis>:
     188:	2f b7       	in	r18, 0x3f	; 63
     18a:	f8 94       	cli
     18c:	60 91 fc 01 	lds	r22, 0x01FC
     190:	70 91 fd 01 	lds	r23, 0x01FD
     194:	80 91 fe 01 	lds	r24, 0x01FE
     198:	90 91 ff 01 	lds	r25, 0x01FF
     19c:	2f bf       	out	0x3f, r18	; 63
     19e:	08 95       	ret

000001a0 <micros>:
     1a0:	3f b7       	in	r19, 0x3f	; 63
     1a2:	f8 94       	cli
     1a4:	80 91 00 02 	lds	r24, 0x0200
     1a8:	90 91 01 02 	lds	r25, 0x0201
     1ac:	a0 91 02 02 	lds	r26, 0x0202
     1b0:	b0 91 03 02 	lds	r27, 0x0203
     1b4:	26 b5       	in	r18, 0x26	; 38
     1b6:	a8 9b       	sbis	0x15, 0	; 21
     1b8:	05 c0       	rjmp	.+10     	; 0x1c4 <micros+0x24>
     1ba:	2f 3f       	cpi	r18, 0xFF	; 255
     1bc:	19 f0       	breq	.+6      	; 0x1c4 <micros+0x24>
     1be:	01 96       	adiw	r24, 0x01	; 1
     1c0:	a1 1d       	adc	r26, r1
     1c2:	b1 1d       	adc	r27, r1
     1c4:	3f bf       	out	0x3f, r19	; 63
     1c6:	ba 2f       	mov	r27, r26
     1c8:	a9 2f       	mov	r26, r25
     1ca:	98 2f       	mov	r25, r24
     1cc:	88 27       	eor	r24, r24
     1ce:	82 0f       	add	r24, r18
     1d0:	91 1d       	adc	r25, r1
     1d2:	a1 1d       	adc	r26, r1
     1d4:	b1 1d       	adc	r27, r1
     1d6:	bc 01       	movw	r22, r24
     1d8:	cd 01       	movw	r24, r26
     1da:	66 0f       	add	r22, r22
     1dc:	77 1f       	adc	r23, r23
     1de:	88 1f       	adc	r24, r24
     1e0:	99 1f       	adc	r25, r25
     1e2:	66 0f       	add	r22, r22
     1e4:	77 1f       	adc	r23, r23
     1e6:	88 1f       	adc	r24, r24
     1e8:	99 1f       	adc	r25, r25
     1ea:	08 95       	ret

000001ec <delay>:
     1ec:	8f 92       	push	r8
     1ee:	9f 92       	push	r9
     1f0:	af 92       	push	r10
     1f2:	bf 92       	push	r11
     1f4:	cf 92       	push	r12
     1f6:	df 92       	push	r13
     1f8:	ef 92       	push	r14
     1fa:	ff 92       	push	r15
     1fc:	4b 01       	movw	r8, r22
     1fe:	5c 01       	movw	r10, r24
     200:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <micros>
     204:	6b 01       	movw	r12, r22
     206:	7c 01       	movw	r14, r24
     208:	81 14       	cp	r8, r1
     20a:	91 04       	cpc	r9, r1
     20c:	a1 04       	cpc	r10, r1
     20e:	b1 04       	cpc	r11, r1
     210:	f9 f0       	breq	.+62     	; 0x250 <delay+0x64>
     212:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <yield>
     216:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <micros>
     21a:	dc 01       	movw	r26, r24
     21c:	cb 01       	movw	r24, r22
     21e:	8c 19       	sub	r24, r12
     220:	9d 09       	sbc	r25, r13
     222:	ae 09       	sbc	r26, r14
     224:	bf 09       	sbc	r27, r15
     226:	88 3e       	cpi	r24, 0xE8	; 232
     228:	93 40       	sbci	r25, 0x03	; 3
     22a:	a1 05       	cpc	r26, r1
     22c:	b1 05       	cpc	r27, r1
     22e:	88 f3       	brcs	.-30     	; 0x212 <delay+0x26>
     230:	21 e0       	ldi	r18, 0x01	; 1
     232:	82 1a       	sub	r8, r18
     234:	91 08       	sbc	r9, r1
     236:	a1 08       	sbc	r10, r1
     238:	b1 08       	sbc	r11, r1
     23a:	88 ee       	ldi	r24, 0xE8	; 232
     23c:	c8 0e       	add	r12, r24
     23e:	83 e0       	ldi	r24, 0x03	; 3
     240:	d8 1e       	adc	r13, r24
     242:	e1 1c       	adc	r14, r1
     244:	f1 1c       	adc	r15, r1
     246:	81 14       	cp	r8, r1
     248:	91 04       	cpc	r9, r1
     24a:	a1 04       	cpc	r10, r1
     24c:	b1 04       	cpc	r11, r1
     24e:	19 f7       	brne	.-58     	; 0x216 <delay+0x2a>
     250:	ff 90       	pop	r15
     252:	ef 90       	pop	r14
     254:	df 90       	pop	r13
     256:	cf 90       	pop	r12
     258:	bf 90       	pop	r11
     25a:	af 90       	pop	r10
     25c:	9f 90       	pop	r9
     25e:	8f 90       	pop	r8
     260:	08 95       	ret

00000262 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     262:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     264:	84 b5       	in	r24, 0x24	; 36
     266:	82 60       	ori	r24, 0x02	; 2
     268:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     26a:	84 b5       	in	r24, 0x24	; 36
     26c:	81 60       	ori	r24, 0x01	; 1
     26e:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     270:	85 b5       	in	r24, 0x25	; 37
     272:	82 60       	ori	r24, 0x02	; 2
     274:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     276:	85 b5       	in	r24, 0x25	; 37
     278:	81 60       	ori	r24, 0x01	; 1
     27a:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     27c:	ee e6       	ldi	r30, 0x6E	; 110
     27e:	f0 e0       	ldi	r31, 0x00	; 0
     280:	80 81       	ld	r24, Z
     282:	81 60       	ori	r24, 0x01	; 1
     284:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     286:	e1 e8       	ldi	r30, 0x81	; 129
     288:	f0 e0       	ldi	r31, 0x00	; 0
     28a:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     28c:	80 81       	ld	r24, Z
     28e:	82 60       	ori	r24, 0x02	; 2
     290:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     292:	80 81       	ld	r24, Z
     294:	81 60       	ori	r24, 0x01	; 1
     296:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     298:	e0 e8       	ldi	r30, 0x80	; 128
     29a:	f0 e0       	ldi	r31, 0x00	; 0
     29c:	80 81       	ld	r24, Z
     29e:	81 60       	ori	r24, 0x01	; 1
     2a0:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     2a2:	e1 eb       	ldi	r30, 0xB1	; 177
     2a4:	f0 e0       	ldi	r31, 0x00	; 0
     2a6:	80 81       	ld	r24, Z
     2a8:	84 60       	ori	r24, 0x04	; 4
     2aa:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     2ac:	e0 eb       	ldi	r30, 0xB0	; 176
     2ae:	f0 e0       	ldi	r31, 0x00	; 0
     2b0:	80 81       	ld	r24, Z
     2b2:	81 60       	ori	r24, 0x01	; 1
     2b4:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
     2b6:	ea e7       	ldi	r30, 0x7A	; 122
     2b8:	f0 e0       	ldi	r31, 0x00	; 0
     2ba:	80 81       	ld	r24, Z
     2bc:	84 60       	ori	r24, 0x04	; 4
     2be:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
     2c0:	80 81       	ld	r24, Z
     2c2:	82 60       	ori	r24, 0x02	; 2
     2c4:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
     2c6:	80 81       	ld	r24, Z
     2c8:	81 60       	ori	r24, 0x01	; 1
     2ca:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     2cc:	80 81       	ld	r24, Z
     2ce:	80 68       	ori	r24, 0x80	; 128
     2d0:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     2d2:	10 92 c1 00 	sts	0x00C1, r1
     2d6:	08 95       	ret

000002d8 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
     2d8:	08 95       	ret

000002da <_ZN14OneSheeldClassC1Ev>:
        oneSheeldWrite(tempData[j]);
      }
 }
    oneSheeldWrite((byte)END_OF_FRAME);
    if(shieldID!=ONESHEELD_ID)lastTimeFrameSent=millis()+1;
}
     2da:	fc 01       	movw	r30, r24
     2dc:	15 86       	std	Z+13, r1	; 0x0d
     2de:	16 86       	std	Z+14, r1	; 0x0e
     2e0:	17 86       	std	Z+15, r1	; 0x0f
     2e2:	10 8a       	std	Z+16, r1	; 0x10
     2e4:	11 8a       	std	Z+17, r1	; 0x11
     2e6:	12 8a       	std	Z+18, r1	; 0x12
     2e8:	13 8a       	std	Z+19, r1	; 0x13
     2ea:	10 8e       	std	Z+24, r1	; 0x18
     2ec:	14 86       	std	Z+12, r1	; 0x0c
     2ee:	14 82       	std	Z+4, r1	; 0x04
     2f0:	15 82       	std	Z+5, r1	; 0x05
     2f2:	10 92 7d 02 	sts	0x027D, r1
     2f6:	13 86       	std	Z+11, r1	; 0x0b
     2f8:	16 82       	std	Z+6, r1	; 0x06
     2fa:	17 82       	std	Z+7, r1	; 0x07
     2fc:	10 86       	std	Z+8, r1	; 0x08
     2fe:	11 86       	std	Z+9, r1	; 0x09
     300:	12 86       	std	Z+10, r1	; 0x0a
     302:	08 95       	ret

00000304 <_ZN14OneSheeldClass5beginEl>:
     304:	89 e8       	ldi	r24, 0x89	; 137
     306:	92 e0       	ldi	r25, 0x02	; 2
     308:	90 93 27 02 	sts	0x0227, r25
     30c:	80 93 26 02 	sts	0x0226, r24
     310:	26 e0       	ldi	r18, 0x06	; 6
     312:	0c 94 0c 09 	jmp	0x1218	; 0x1218 <_ZN14HardwareSerial5beginEmh>

00000316 <_ZN14OneSheeldClass17addToShieldsArrayEP12ShieldParent>:
     316:	e0 91 83 02 	lds	r30, 0x0283
     31a:	ea 32       	cpi	r30, 0x2A	; 42
     31c:	59 f0       	breq	.+22     	; 0x334 <_ZN14OneSheeldClass17addToShieldsArrayEP12ShieldParent+0x1e>
     31e:	21 e0       	ldi	r18, 0x01	; 1
     320:	2e 0f       	add	r18, r30
     322:	20 93 83 02 	sts	0x0283, r18
     326:	f0 e0       	ldi	r31, 0x00	; 0
     328:	ee 0f       	add	r30, r30
     32a:	ff 1f       	adc	r31, r31
     32c:	e8 5d       	subi	r30, 0xD8	; 216
     32e:	fd 4f       	sbci	r31, 0xFD	; 253
     330:	91 83       	std	Z+1, r25	; 0x01
     332:	80 83       	st	Z, r24
     334:	08 95       	ret

00000336 <_ZN14OneSheeldClass14oneSheeldWriteEh>:
     336:	cf 93       	push	r28
     338:	df 93       	push	r29
     33a:	ec 01       	movw	r28, r24
     33c:	80 91 26 02 	lds	r24, 0x0226
     340:	90 91 27 02 	lds	r25, 0x0227
     344:	dc 01       	movw	r26, r24
     346:	ed 91       	ld	r30, X+
     348:	fc 91       	ld	r31, X
     34a:	01 90       	ld	r0, Z+
     34c:	f0 81       	ld	r31, Z
     34e:	e0 2d       	mov	r30, r0
     350:	09 95       	icall
     352:	8a 85       	ldd	r24, Y+10	; 0x0a
     354:	81 11       	cpse	r24, r1
     356:	08 c0       	rjmp	.+16     	; 0x368 <_ZN14OneSheeldClass14oneSheeldWriteEh+0x32>
     358:	62 e0       	ldi	r22, 0x02	; 2
     35a:	70 e0       	ldi	r23, 0x00	; 0
     35c:	80 e0       	ldi	r24, 0x00	; 0
     35e:	90 e0       	ldi	r25, 0x00	; 0
     360:	df 91       	pop	r29
     362:	cf 91       	pop	r28
     364:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <delay>
     368:	df 91       	pop	r29
     36a:	cf 91       	pop	r28
     36c:	08 95       	ret

0000036e <_ZN14OneSheeldClass11getShieldIdEv>:
     36e:	fc 01       	movw	r30, r24
     370:	85 85       	ldd	r24, Z+13	; 0x0d
     372:	08 95       	ret

00000374 <_ZN14OneSheeldClass13getFunctionIdEv>:
     374:	fc 01       	movw	r30, r24
     376:	87 85       	ldd	r24, Z+15	; 0x0f
     378:	08 95       	ret

0000037a <_ZN14OneSheeldClass17getArgumentLengthEh>:
     37a:	dc 01       	movw	r26, r24
     37c:	56 96       	adiw	r26, 0x16	; 22
     37e:	ed 91       	ld	r30, X+
     380:	fc 91       	ld	r31, X
     382:	57 97       	sbiw	r26, 0x17	; 23
     384:	e6 0f       	add	r30, r22
     386:	f1 1d       	adc	r31, r1
     388:	80 81       	ld	r24, Z
     38a:	08 95       	ret

0000038c <_ZN14OneSheeldClass15getArgumentDataEh>:
     38c:	70 e0       	ldi	r23, 0x00	; 0
     38e:	dc 01       	movw	r26, r24
     390:	56 96       	adiw	r26, 0x16	; 22
     392:	ed 91       	ld	r30, X+
     394:	fc 91       	ld	r31, X
     396:	57 97       	sbiw	r26, 0x17	; 23
     398:	e6 0f       	add	r30, r22
     39a:	f7 1f       	adc	r31, r23
     39c:	20 81       	ld	r18, Z
     39e:	22 23       	and	r18, r18
     3a0:	59 f0       	breq	.+22     	; 0x3b8 <_ZN14OneSheeldClass15getArgumentDataEh+0x2c>
     3a2:	66 0f       	add	r22, r22
     3a4:	77 1f       	adc	r23, r23
     3a6:	54 96       	adiw	r26, 0x14	; 20
     3a8:	ed 91       	ld	r30, X+
     3aa:	fc 91       	ld	r31, X
     3ac:	55 97       	sbiw	r26, 0x15	; 21
     3ae:	e6 0f       	add	r30, r22
     3b0:	f7 1f       	adc	r31, r23
     3b2:	80 81       	ld	r24, Z
     3b4:	91 81       	ldd	r25, Z+1	; 0x01
     3b6:	08 95       	ret
     3b8:	80 e0       	ldi	r24, 0x00	; 0
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	08 95       	ret

000003be <_ZN14OneSheeldClass19freeMemoryAllocatedEv>:
     3be:	0f 93       	push	r16
     3c0:	1f 93       	push	r17
     3c2:	cf 93       	push	r28
     3c4:	df 93       	push	r29
     3c6:	ec 01       	movw	r28, r24
     3c8:	1b 86       	std	Y+11, r1	; 0x0b
     3ca:	8c 81       	ldd	r24, Y+4	; 0x04
     3cc:	88 23       	and	r24, r24
     3ce:	41 f1       	breq	.+80     	; 0x420 <__FUSE_REGION_LENGTH__+0x20>
     3d0:	00 e0       	ldi	r16, 0x00	; 0
     3d2:	10 e0       	ldi	r17, 0x00	; 0
     3d4:	2c 85       	ldd	r18, Y+12	; 0x0c
     3d6:	30 e0       	ldi	r19, 0x00	; 0
     3d8:	8c 89       	ldd	r24, Y+20	; 0x14
     3da:	9d 89       	ldd	r25, Y+21	; 0x15
     3dc:	02 17       	cp	r16, r18
     3de:	13 07       	cpc	r17, r19
     3e0:	ac f4       	brge	.+42     	; 0x40c <__FUSE_REGION_LENGTH__+0xc>
     3e2:	98 01       	movw	r18, r16
     3e4:	22 0f       	add	r18, r18
     3e6:	33 1f       	adc	r19, r19
     3e8:	fc 01       	movw	r30, r24
     3ea:	e2 0f       	add	r30, r18
     3ec:	f3 1f       	adc	r31, r19
     3ee:	80 81       	ld	r24, Z
     3f0:	91 81       	ldd	r25, Z+1	; 0x01
     3f2:	00 97       	sbiw	r24, 0x00	; 0
     3f4:	11 f0       	breq	.+4      	; 0x3fa <_ZN14OneSheeldClass19freeMemoryAllocatedEv+0x3c>
     3f6:	0e 94 a1 0b 	call	0x1742	; 0x1742 <free>
     3fa:	6d e0       	ldi	r22, 0x0D	; 13
     3fc:	71 e0       	ldi	r23, 0x01	; 1
     3fe:	89 e8       	ldi	r24, 0x89	; 137
     400:	92 e0       	ldi	r25, 0x02	; 2
     402:	0e 94 2d 0a 	call	0x145a	; 0x145a <_ZN5Print5printEPKc>
     406:	0f 5f       	subi	r16, 0xFF	; 255
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	e4 cf       	rjmp	.-56     	; 0x3d4 <_ZN14OneSheeldClass19freeMemoryAllocatedEv+0x16>
     40c:	1c 86       	std	Y+12, r1	; 0x0c
     40e:	0e 94 a1 0b 	call	0x1742	; 0x1742 <free>
     412:	61 e1       	ldi	r22, 0x11	; 17
     414:	71 e0       	ldi	r23, 0x01	; 1
     416:	89 e8       	ldi	r24, 0x89	; 137
     418:	92 e0       	ldi	r25, 0x02	; 2
     41a:	0e 94 2d 0a 	call	0x145a	; 0x145a <_ZN5Print5printEPKc>
     41e:	1c 82       	std	Y+4, r1	; 0x04
     420:	8d 81       	ldd	r24, Y+5	; 0x05
     422:	88 23       	and	r24, r24
     424:	59 f0       	breq	.+22     	; 0x43c <__FUSE_REGION_LENGTH__+0x3c>
     426:	8e 89       	ldd	r24, Y+22	; 0x16
     428:	9f 89       	ldd	r25, Y+23	; 0x17
     42a:	0e 94 a1 0b 	call	0x1742	; 0x1742 <free>
     42e:	65 e1       	ldi	r22, 0x15	; 21
     430:	71 e0       	ldi	r23, 0x01	; 1
     432:	89 e8       	ldi	r24, 0x89	; 137
     434:	92 e0       	ldi	r25, 0x02	; 2
     436:	0e 94 42 0a 	call	0x1484	; 0x1484 <_ZN5Print7printlnEPKc>
     43a:	1d 82       	std	Y+5, r1	; 0x05
     43c:	df 91       	pop	r29
     43e:	cf 91       	pop	r28
     440:	1f 91       	pop	r17
     442:	0f 91       	pop	r16
     444:	08 95       	ret

00000446 <_ZN14OneSheeldClass13isInACallbackEv>:
     446:	80 91 7e 02 	lds	r24, 0x027E
     44a:	88 23       	and	r24, r24
     44c:	21 f0       	breq	.+8      	; 0x456 <_ZN14OneSheeldClass13isInACallbackEv+0x10>
     44e:	90 91 7d 02 	lds	r25, 0x027D
     452:	81 e0       	ldi	r24, 0x01	; 1
     454:	89 27       	eor	r24, r25
     456:	08 95       	ret

00000458 <_ZN14OneSheeldClass19getVerificationByteEv>:
     458:	20 e1       	ldi	r18, 0x10	; 16
     45a:	30 e0       	ldi	r19, 0x00	; 0
     45c:	40 e0       	ldi	r20, 0x00	; 0
     45e:	50 e0       	ldi	r21, 0x00	; 0
     460:	60 e0       	ldi	r22, 0x00	; 0
     462:	70 e0       	ldi	r23, 0x00	; 0
     464:	cb 01       	movw	r24, r22
     466:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <_Z6randomll>
     46a:	86 2f       	mov	r24, r22
     46c:	80 95       	com	r24
     46e:	20 e1       	ldi	r18, 0x10	; 16
     470:	82 9f       	mul	r24, r18
     472:	c0 01       	movw	r24, r0
     474:	11 24       	eor	r1, r1
     476:	6f 70       	andi	r22, 0x0F	; 15
     478:	86 2b       	or	r24, r22
     47a:	08 95       	ret

0000047c <_ZN14OneSheeldClass15sendShieldFrameEhhhhz>:
     47c:	4f 92       	push	r4
     47e:	5f 92       	push	r5
     480:	6f 92       	push	r6
     482:	7f 92       	push	r7
     484:	8f 92       	push	r8
     486:	9f 92       	push	r9
     488:	af 92       	push	r10
     48a:	bf 92       	push	r11
     48c:	df 92       	push	r13
     48e:	ef 92       	push	r14
     490:	ff 92       	push	r15
     492:	0f 93       	push	r16
     494:	1f 93       	push	r17
     496:	cf 93       	push	r28
     498:	df 93       	push	r29
     49a:	cd b7       	in	r28, 0x3d	; 61
     49c:	de b7       	in	r29, 0x3e	; 62
     49e:	6f 97       	sbiw	r28, 0x1f	; 31
     4a0:	0f b6       	in	r0, 0x3f	; 63
     4a2:	f8 94       	cli
     4a4:	de bf       	out	0x3e, r29	; 62
     4a6:	0f be       	out	0x3f, r0	; 63
     4a8:	cd bf       	out	0x3d, r28	; 61
     4aa:	09 a9       	ldd	r16, Y+49	; 0x31
     4ac:	1a a9       	ldd	r17, Y+50	; 0x32
     4ae:	db a8       	ldd	r13, Y+51	; 0x33
     4b0:	fe a8       	ldd	r15, Y+54	; 0x36
     4b2:	0e 94 c4 00 	call	0x188	; 0x188 <millis>
     4b6:	80 90 7f 02 	lds	r8, 0x027F
     4ba:	90 90 80 02 	lds	r9, 0x0280
     4be:	a0 90 81 02 	lds	r10, 0x0281
     4c2:	b0 90 82 02 	lds	r11, 0x0282
     4c6:	dd 20       	and	r13, r13
     4c8:	09 f4       	brne	.+2      	; 0x4cc <_ZN14OneSheeldClass15sendShieldFrameEhhhhz+0x50>
     4ca:	80 c0       	rjmp	.+256    	; 0x5cc <_ZN14OneSheeldClass15sendShieldFrameEhhhhz+0x150>
     4cc:	20 91 7c 02 	lds	r18, 0x027C
     4d0:	22 23       	and	r18, r18
     4d2:	09 f4       	brne	.+2      	; 0x4d6 <_ZN14OneSheeldClass15sendShieldFrameEhhhhz+0x5a>
     4d4:	7b c0       	rjmp	.+246    	; 0x5cc <_ZN14OneSheeldClass15sendShieldFrameEhhhhz+0x150>
     4d6:	81 14       	cp	r8, r1
     4d8:	91 04       	cpc	r9, r1
     4da:	a1 04       	cpc	r10, r1
     4dc:	b1 04       	cpc	r11, r1
     4de:	09 f4       	brne	.+2      	; 0x4e2 <_ZN14OneSheeldClass15sendShieldFrameEhhhhz+0x66>
     4e0:	75 c0       	rjmp	.+234    	; 0x5cc <_ZN14OneSheeldClass15sendShieldFrameEhhhhz+0x150>
     4e2:	dc 01       	movw	r26, r24
     4e4:	cb 01       	movw	r24, r22
     4e6:	88 19       	sub	r24, r8
     4e8:	99 09       	sbc	r25, r9
     4ea:	aa 09       	sbc	r26, r10
     4ec:	bb 09       	sbc	r27, r11
     4ee:	01 96       	adiw	r24, 0x01	; 1
     4f0:	a1 1d       	adc	r26, r1
     4f2:	b1 1d       	adc	r27, r1
     4f4:	88 3c       	cpi	r24, 0xC8	; 200
     4f6:	91 05       	cpc	r25, r1
     4f8:	a1 05       	cpc	r26, r1
     4fa:	b1 05       	cpc	r27, r1
     4fc:	08 f0       	brcs	.+2      	; 0x500 <_ZN14OneSheeldClass15sendShieldFrameEhhhhz+0x84>
     4fe:	66 c0       	rjmp	.+204    	; 0x5cc <_ZN14OneSheeldClass15sendShieldFrameEhhhhz+0x150>
     500:	80 91 7e 02 	lds	r24, 0x027E
     504:	98 ec       	ldi	r25, 0xC8	; 200
     506:	89 0e       	add	r8, r25
     508:	91 1c       	adc	r9, r1
     50a:	a1 1c       	adc	r10, r1
     50c:	b1 1c       	adc	r11, r1
     50e:	88 23       	and	r24, r24
     510:	09 f4       	brne	.+2      	; 0x514 <_ZN14OneSheeldClass15sendShieldFrameEhhhhz+0x98>
     512:	54 c0       	rjmp	.+168    	; 0x5bc <_ZN14OneSheeldClass15sendShieldFrameEhhhhz+0x140>
     514:	ce 01       	movw	r24, r28
     516:	01 96       	adiw	r24, 0x01	; 1
     518:	0e 94 6d 01 	call	0x2da	; 0x2da <_ZN14OneSheeldClassC1Ev>
     51c:	ce 01       	movw	r24, r28
     51e:	01 96       	adiw	r24, 0x01	; 1
     520:	0e 94 b8 06 	call	0xd70	; 0xd70 <_ZN12ShieldParent20setOneSheeldInstanceER14OneSheeldClass>
     524:	0e 94 c4 00 	call	0x188	; 0x188 <millis>
     528:	68 15       	cp	r22, r8
     52a:	79 05       	cpc	r23, r9
     52c:	8a 05       	cpc	r24, r10
     52e:	9b 05       	cpc	r25, r11
     530:	f0 f4       	brcc	.+60     	; 0x56e <_ZN14OneSheeldClass15sendShieldFrameEhhhhz+0xf2>
     532:	80 91 26 02 	lds	r24, 0x0226
     536:	90 91 27 02 	lds	r25, 0x0227
     53a:	dc 01       	movw	r26, r24
     53c:	ed 91       	ld	r30, X+
     53e:	fc 91       	ld	r31, X
     540:	04 80       	ldd	r0, Z+4	; 0x04
     542:	f5 81       	ldd	r31, Z+5	; 0x05
     544:	e0 2d       	mov	r30, r0
     546:	09 95       	icall
     548:	89 2b       	or	r24, r25
     54a:	61 f3       	breq	.-40     	; 0x524 <_ZN14OneSheeldClass15sendShieldFrameEhhhhz+0xa8>
     54c:	80 91 26 02 	lds	r24, 0x0226
     550:	90 91 27 02 	lds	r25, 0x0227
     554:	dc 01       	movw	r26, r24
     556:	ed 91       	ld	r30, X+
     558:	fc 91       	ld	r31, X
     55a:	06 80       	ldd	r0, Z+6	; 0x06
     55c:	f7 81       	ldd	r31, Z+7	; 0x07
     55e:	e0 2d       	mov	r30, r0
     560:	09 95       	icall
     562:	bc 01       	movw	r22, r24
     564:	ce 01       	movw	r24, r28
     566:	01 96       	adiw	r24, 0x01	; 1
     568:	0e 94 df 04 	call	0x9be	; 0x9be <_ZN14OneSheeldClass12processInputEi>
     56c:	db cf       	rjmp	.-74     	; 0x524 <_ZN14OneSheeldClass15sendShieldFrameEhhhhz+0xa8>
     56e:	8c 85       	ldd	r24, Y+12	; 0x0c
     570:	81 11       	cpse	r24, r1
     572:	df cf       	rjmp	.-66     	; 0x532 <_ZN14OneSheeldClass15sendShieldFrameEhhhhz+0xb6>
     574:	0e 94 c0 06 	call	0xd80	; 0xd80 <_ZN12ShieldParent22unSetOneSheeldInstanceEv>
     578:	29 c0       	rjmp	.+82     	; 0x5cc <_ZN14OneSheeldClass15sendShieldFrameEhhhhz+0x150>
     57a:	f8 01       	movw	r30, r16
     57c:	83 85       	ldd	r24, Z+11	; 0x0b
     57e:	88 23       	and	r24, r24
     580:	29 f1       	breq	.+74     	; 0x5cc <_ZN14OneSheeldClass15sendShieldFrameEhhhhz+0x150>
     582:	80 91 26 02 	lds	r24, 0x0226
     586:	90 91 27 02 	lds	r25, 0x0227
     58a:	dc 01       	movw	r26, r24
     58c:	ed 91       	ld	r30, X+
     58e:	fc 91       	ld	r31, X
     590:	04 80       	ldd	r0, Z+4	; 0x04
     592:	f5 81       	ldd	r31, Z+5	; 0x05
     594:	e0 2d       	mov	r30, r0
     596:	09 95       	icall
     598:	89 2b       	or	r24, r25
     59a:	81 f0       	breq	.+32     	; 0x5bc <_ZN14OneSheeldClass15sendShieldFrameEhhhhz+0x140>
     59c:	80 91 26 02 	lds	r24, 0x0226
     5a0:	90 91 27 02 	lds	r25, 0x0227
     5a4:	dc 01       	movw	r26, r24
     5a6:	ed 91       	ld	r30, X+
     5a8:	fc 91       	ld	r31, X
     5aa:	06 80       	ldd	r0, Z+6	; 0x06
     5ac:	f7 81       	ldd	r31, Z+7	; 0x07
     5ae:	e0 2d       	mov	r30, r0
     5b0:	09 95       	icall
     5b2:	bc 01       	movw	r22, r24
     5b4:	84 e0       	ldi	r24, 0x04	; 4
     5b6:	92 e0       	ldi	r25, 0x02	; 2
     5b8:	0e 94 df 04 	call	0x9be	; 0x9be <_ZN14OneSheeldClass12processInputEi>
     5bc:	0e 94 c4 00 	call	0x188	; 0x188 <millis>
     5c0:	68 15       	cp	r22, r8
     5c2:	79 05       	cpc	r23, r9
     5c4:	8a 05       	cpc	r24, r10
     5c6:	9b 05       	cpc	r25, r11
     5c8:	e0 f2       	brcs	.-72     	; 0x582 <_ZN14OneSheeldClass15sendShieldFrameEhhhhz+0x106>
     5ca:	d7 cf       	rjmp	.-82     	; 0x57a <_ZN14OneSheeldClass15sendShieldFrameEhhhhz+0xfe>
     5cc:	81 e0       	ldi	r24, 0x01	; 1
     5ce:	80 93 7c 02 	sts	0x027C, r24
     5d2:	2e 01       	movw	r4, r28
     5d4:	f7 e3       	ldi	r31, 0x37	; 55
     5d6:	4f 0e       	add	r4, r31
     5d8:	51 1c       	adc	r5, r1
     5da:	6f ef       	ldi	r22, 0xFF	; 255
     5dc:	c8 01       	movw	r24, r16
     5de:	0e 94 9b 01 	call	0x336	; 0x336 <_ZN14OneSheeldClass14oneSheeldWriteEh>
     5e2:	6d e0       	ldi	r22, 0x0D	; 13
     5e4:	c8 01       	movw	r24, r16
     5e6:	0e 94 9b 01 	call	0x336	; 0x336 <_ZN14OneSheeldClass14oneSheeldWriteEh>
     5ea:	6d 2d       	mov	r22, r13
     5ec:	c8 01       	movw	r24, r16
     5ee:	0e 94 9b 01 	call	0x336	; 0x336 <_ZN14OneSheeldClass14oneSheeldWriteEh>
     5f2:	c8 01       	movw	r24, r16
     5f4:	0e 94 2c 02 	call	0x458	; 0x458 <_ZN14OneSheeldClass19getVerificationByteEv>
     5f8:	68 2f       	mov	r22, r24
     5fa:	c8 01       	movw	r24, r16
     5fc:	0e 94 9b 01 	call	0x336	; 0x336 <_ZN14OneSheeldClass14oneSheeldWriteEh>
     600:	6d a9       	ldd	r22, Y+53	; 0x35
     602:	c8 01       	movw	r24, r16
     604:	0e 94 9b 01 	call	0x336	; 0x336 <_ZN14OneSheeldClass14oneSheeldWriteEh>
     608:	6f 2d       	mov	r22, r15
     60a:	c8 01       	movw	r24, r16
     60c:	0e 94 9b 01 	call	0x336	; 0x336 <_ZN14OneSheeldClass14oneSheeldWriteEh>
     610:	6f 2d       	mov	r22, r15
     612:	60 95       	com	r22
     614:	c8 01       	movw	r24, r16
     616:	0e 94 9b 01 	call	0x336	; 0x336 <_ZN14OneSheeldClass14oneSheeldWriteEh>
     61a:	a1 2c       	mov	r10, r1
     61c:	b1 2c       	mov	r11, r1
     61e:	8f 2c       	mov	r8, r15
     620:	91 2c       	mov	r9, r1
     622:	a8 14       	cp	r10, r8
     624:	b9 04       	cpc	r11, r9
     626:	dc f5       	brge	.+118    	; 0x69e <_ZN14OneSheeldClass15sendShieldFrameEhhhhz+0x222>
     628:	32 01       	movw	r6, r4
     62a:	82 e0       	ldi	r24, 0x02	; 2
     62c:	68 0e       	add	r6, r24
     62e:	71 1c       	adc	r7, r1
     630:	d2 01       	movw	r26, r4
     632:	ed 90       	ld	r14, X+
     634:	fc 90       	ld	r15, X
     636:	f7 01       	movw	r30, r14
     638:	60 81       	ld	r22, Z
     63a:	c8 01       	movw	r24, r16
     63c:	0e 94 9b 01 	call	0x336	; 0x336 <_ZN14OneSheeldClass14oneSheeldWriteEh>
     640:	d7 01       	movw	r26, r14
     642:	6c 91       	ld	r22, X
     644:	60 95       	com	r22
     646:	c8 01       	movw	r24, r16
     648:	0e 94 9b 01 	call	0x336	; 0x336 <_ZN14OneSheeldClass14oneSheeldWriteEh>
     64c:	41 2c       	mov	r4, r1
     64e:	51 2c       	mov	r5, r1
     650:	f7 01       	movw	r30, r14
     652:	80 81       	ld	r24, Z
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	48 16       	cp	r4, r24
     658:	59 06       	cpc	r5, r25
     65a:	7c f4       	brge	.+30     	; 0x67a <_ZN14OneSheeldClass15sendShieldFrameEhhhhz+0x1fe>
     65c:	d7 01       	movw	r26, r14
     65e:	11 96       	adiw	r26, 0x01	; 1
     660:	ed 91       	ld	r30, X+
     662:	fc 91       	ld	r31, X
     664:	12 97       	sbiw	r26, 0x02	; 2
     666:	e4 0d       	add	r30, r4
     668:	f5 1d       	adc	r31, r5
     66a:	60 81       	ld	r22, Z
     66c:	c8 01       	movw	r24, r16
     66e:	0e 94 9b 01 	call	0x336	; 0x336 <_ZN14OneSheeldClass14oneSheeldWriteEh>
     672:	bf ef       	ldi	r27, 0xFF	; 255
     674:	4b 1a       	sub	r4, r27
     676:	5b 0a       	sbc	r5, r27
     678:	eb cf       	rjmp	.-42     	; 0x650 <_ZN14OneSheeldClass15sendShieldFrameEhhhhz+0x1d4>
     67a:	e1 14       	cp	r14, r1
     67c:	f1 04       	cpc	r15, r1
     67e:	51 f0       	breq	.+20     	; 0x694 <_ZN14OneSheeldClass15sendShieldFrameEhhhhz+0x218>
     680:	83 81       	ldd	r24, Z+3	; 0x03
     682:	88 23       	and	r24, r24
     684:	21 f0       	breq	.+8      	; 0x68e <_ZN14OneSheeldClass15sendShieldFrameEhhhhz+0x212>
     686:	81 81       	ldd	r24, Z+1	; 0x01
     688:	92 81       	ldd	r25, Z+2	; 0x02
     68a:	0e 94 a1 0b 	call	0x1742	; 0x1742 <free>
     68e:	c7 01       	movw	r24, r14
     690:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <_ZdlPv>
     694:	ff ef       	ldi	r31, 0xFF	; 255
     696:	af 1a       	sub	r10, r31
     698:	bf 0a       	sbc	r11, r31
     69a:	23 01       	movw	r4, r6
     69c:	c2 cf       	rjmp	.-124    	; 0x622 <_ZN14OneSheeldClass15sendShieldFrameEhhhhz+0x1a6>
     69e:	60 e0       	ldi	r22, 0x00	; 0
     6a0:	c8 01       	movw	r24, r16
     6a2:	0e 94 9b 01 	call	0x336	; 0x336 <_ZN14OneSheeldClass14oneSheeldWriteEh>
     6a6:	dd 20       	and	r13, r13
     6a8:	79 f0       	breq	.+30     	; 0x6c8 <_ZN14OneSheeldClass15sendShieldFrameEhhhhz+0x24c>
     6aa:	0e 94 c4 00 	call	0x188	; 0x188 <millis>
     6ae:	dc 01       	movw	r26, r24
     6b0:	cb 01       	movw	r24, r22
     6b2:	01 96       	adiw	r24, 0x01	; 1
     6b4:	a1 1d       	adc	r26, r1
     6b6:	b1 1d       	adc	r27, r1
     6b8:	80 93 7f 02 	sts	0x027F, r24
     6bc:	90 93 80 02 	sts	0x0280, r25
     6c0:	a0 93 81 02 	sts	0x0281, r26
     6c4:	b0 93 82 02 	sts	0x0282, r27
     6c8:	6f 96       	adiw	r28, 0x1f	; 31
     6ca:	0f b6       	in	r0, 0x3f	; 63
     6cc:	f8 94       	cli
     6ce:	de bf       	out	0x3e, r29	; 62
     6d0:	0f be       	out	0x3f, r0	; 63
     6d2:	cd bf       	out	0x3d, r28	; 61
     6d4:	df 91       	pop	r29
     6d6:	cf 91       	pop	r28
     6d8:	1f 91       	pop	r17
     6da:	0f 91       	pop	r16
     6dc:	ff 90       	pop	r15
     6de:	ef 90       	pop	r14
     6e0:	df 90       	pop	r13
     6e2:	bf 90       	pop	r11
     6e4:	af 90       	pop	r10
     6e6:	9f 90       	pop	r9
     6e8:	8f 90       	pop	r8
     6ea:	7f 90       	pop	r7
     6ec:	6f 90       	pop	r6
     6ee:	5f 90       	pop	r5
     6f0:	4f 90       	pop	r4
     6f2:	08 95       	ret

000006f4 <_ZN14OneSheeldClass4initEv>:
     6f4:	cf 93       	push	r28
     6f6:	df 93       	push	r29
     6f8:	1f 92       	push	r1
     6fa:	22 e0       	ldi	r18, 0x02	; 2
     6fc:	2f 93       	push	r18
     6fe:	1f 92       	push	r1
     700:	1f 92       	push	r1
     702:	9f 93       	push	r25
     704:	8f 93       	push	r24
     706:	0e 94 3e 02 	call	0x47c	; 0x47c <_ZN14OneSheeldClass15sendShieldFrameEhhhhz>
     70a:	81 e0       	ldi	r24, 0x01	; 1
     70c:	80 93 85 02 	sts	0x0285, r24
     710:	0f 90       	pop	r0
     712:	0f 90       	pop	r0
     714:	0f 90       	pop	r0
     716:	0f 90       	pop	r0
     718:	0f 90       	pop	r0
     71a:	0f 90       	pop	r0
     71c:	80 91 23 02 	lds	r24, 0x0223
     720:	90 91 24 02 	lds	r25, 0x0224
     724:	89 2b       	or	r24, r25
     726:	e1 f0       	breq	.+56     	; 0x760 <_ZN14OneSheeldClass4initEv+0x6c>
     728:	c0 e0       	ldi	r28, 0x00	; 0
     72a:	d0 e0       	ldi	r29, 0x00	; 0
     72c:	20 91 25 02 	lds	r18, 0x0225
     730:	30 e0       	ldi	r19, 0x00	; 0
     732:	80 91 23 02 	lds	r24, 0x0223
     736:	90 91 24 02 	lds	r25, 0x0224
     73a:	c2 17       	cp	r28, r18
     73c:	d3 07       	cpc	r29, r19
     73e:	64 f4       	brge	.+24     	; 0x758 <_ZN14OneSheeldClass4initEv+0x64>
     740:	9e 01       	movw	r18, r28
     742:	22 0f       	add	r18, r18
     744:	33 1f       	adc	r19, r19
     746:	fc 01       	movw	r30, r24
     748:	e2 0f       	add	r30, r18
     74a:	f3 1f       	adc	r31, r19
     74c:	80 81       	ld	r24, Z
     74e:	91 81       	ldd	r25, Z+1	; 0x01
     750:	0e 94 f9 07 	call	0xff2	; 0xff2 <_ZN11HttpRequest13sendInitFrameEv>
     754:	21 96       	adiw	r28, 0x01	; 1
     756:	ea cf       	rjmp	.-44     	; 0x72c <_ZN14OneSheeldClass4initEv+0x38>
     758:	0e 94 a1 0b 	call	0x1742	; 0x1742 <free>
     75c:	10 92 25 02 	sts	0x0225, r1
     760:	df 91       	pop	r29
     762:	cf 91       	pop	r28
     764:	08 95       	ret

00000766 <_ZN14OneSheeldClass5beginEv>:
     766:	cf 93       	push	r28
     768:	df 93       	push	r29
     76a:	20 91 85 02 	lds	r18, 0x0285
     76e:	21 11       	cpse	r18, r1
     770:	0e c0       	rjmp	.+28     	; 0x78e <_ZN14OneSheeldClass5beginEv+0x28>
     772:	ec 01       	movw	r28, r24
     774:	40 e0       	ldi	r20, 0x00	; 0
     776:	52 ec       	ldi	r21, 0xC2	; 194
     778:	61 e0       	ldi	r22, 0x01	; 1
     77a:	70 e0       	ldi	r23, 0x00	; 0
     77c:	0e 94 82 01 	call	0x304	; 0x304 <_ZN14OneSheeldClass5beginEl>
     780:	10 92 84 02 	sts	0x0284, r1
     784:	ce 01       	movw	r24, r28
     786:	df 91       	pop	r29
     788:	cf 91       	pop	r28
     78a:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <_ZN14OneSheeldClass4initEv>
     78e:	df 91       	pop	r29
     790:	cf 91       	pop	r28
     792:	08 95       	ret

00000794 <_ZN14OneSheeldClass12processFrameEv>:
     794:	af 92       	push	r10
     796:	bf 92       	push	r11
     798:	cf 92       	push	r12
     79a:	df 92       	push	r13
     79c:	ef 92       	push	r14
     79e:	ff 92       	push	r15
     7a0:	0f 93       	push	r16
     7a2:	1f 93       	push	r17
     7a4:	cf 93       	push	r28
     7a6:	df 93       	push	r29
     7a8:	1f 92       	push	r1
     7aa:	cd b7       	in	r28, 0x3d	; 61
     7ac:	de b7       	in	r29, 0x3e	; 62
     7ae:	8c 01       	movw	r16, r24
     7b0:	dc 01       	movw	r26, r24
     7b2:	1f 96       	adiw	r26, 0x0f	; 15
     7b4:	8c 91       	ld	r24, X
     7b6:	1f 97       	sbiw	r26, 0x0f	; 15
     7b8:	82 30       	cpi	r24, 0x02	; 2
     7ba:	79 f4       	brne	.+30     	; 0x7da <_ZN14OneSheeldClass12processFrameEv+0x46>
     7bc:	16 96       	adiw	r26, 0x06	; 6
     7be:	1c 92       	st	X, r1
     7c0:	16 97       	sbiw	r26, 0x06	; 6
     7c2:	17 96       	adiw	r26, 0x07	; 7
     7c4:	8c 91       	ld	r24, X
     7c6:	17 97       	sbiw	r26, 0x07	; 7
     7c8:	88 23       	and	r24, r24
     7ca:	09 f4       	brne	.+2      	; 0x7ce <_ZN14OneSheeldClass12processFrameEv+0x3a>
     7cc:	85 c0       	rjmp	.+266    	; 0x8d8 <_ZN14OneSheeldClass12processFrameEv+0x144>
     7ce:	59 96       	adiw	r26, 0x19	; 25
     7d0:	ed 91       	ld	r30, X+
     7d2:	fc 91       	ld	r31, X
     7d4:	5a 97       	sbiw	r26, 0x1a	; 26
     7d6:	80 e0       	ldi	r24, 0x00	; 0
     7d8:	0c c0       	rjmp	.+24     	; 0x7f2 <_ZN14OneSheeldClass12processFrameEv+0x5e>
     7da:	81 30       	cpi	r24, 0x01	; 1
     7dc:	61 f4       	brne	.+24     	; 0x7f6 <_ZN14OneSheeldClass12processFrameEv+0x62>
     7de:	f8 01       	movw	r30, r16
     7e0:	86 83       	std	Z+6, r24	; 0x06
     7e2:	87 81       	ldd	r24, Z+7	; 0x07
     7e4:	88 23       	and	r24, r24
     7e6:	09 f4       	brne	.+2      	; 0x7ea <_ZN14OneSheeldClass12processFrameEv+0x56>
     7e8:	77 c0       	rjmp	.+238    	; 0x8d8 <_ZN14OneSheeldClass12processFrameEv+0x144>
     7ea:	01 8c       	ldd	r0, Z+25	; 0x19
     7ec:	f2 8d       	ldd	r31, Z+26	; 0x1a
     7ee:	e0 2d       	mov	r30, r0
     7f0:	81 e0       	ldi	r24, 0x01	; 1
     7f2:	09 95       	icall
     7f4:	71 c0       	rjmp	.+226    	; 0x8d8 <_ZN14OneSheeldClass12processFrameEv+0x144>
     7f6:	83 30       	cpi	r24, 0x03	; 3
     7f8:	81 f4       	brne	.+32     	; 0x81a <_ZN14OneSheeldClass12processFrameEv+0x86>
     7fa:	1f 92       	push	r1
     7fc:	81 e0       	ldi	r24, 0x01	; 1
     7fe:	8f 93       	push	r24
     800:	1f 92       	push	r1
     802:	1f 92       	push	r1
     804:	1f 93       	push	r17
     806:	0f 93       	push	r16
     808:	0e 94 3e 02 	call	0x47c	; 0x47c <_ZN14OneSheeldClass15sendShieldFrameEhhhhz>
     80c:	0f 90       	pop	r0
     80e:	0f 90       	pop	r0
     810:	0f 90       	pop	r0
     812:	0f 90       	pop	r0
     814:	0f 90       	pop	r0
     816:	0f 90       	pop	r0
     818:	5f c0       	rjmp	.+190    	; 0x8d8 <_ZN14OneSheeldClass12processFrameEv+0x144>
     81a:	85 30       	cpi	r24, 0x05	; 5
     81c:	09 f0       	breq	.+2      	; 0x820 <_ZN14OneSheeldClass12processFrameEv+0x8c>
     81e:	5c c0       	rjmp	.+184    	; 0x8d8 <_ZN14OneSheeldClass12processFrameEv+0x144>
     820:	60 e0       	ldi	r22, 0x00	; 0
     822:	c8 01       	movw	r24, r16
     824:	0e 94 c6 01 	call	0x38c	; 0x38c <_ZN14OneSheeldClass15getArgumentDataEh>
     828:	4b e0       	ldi	r20, 0x0B	; 11
     82a:	50 e0       	ldi	r21, 0x00	; 0
     82c:	bc 01       	movw	r22, r24
     82e:	89 e1       	ldi	r24, 0x19	; 25
     830:	91 e0       	ldi	r25, 0x01	; 1
     832:	0e 94 95 0c 	call	0x192a	; 0x192a <memcmp>
     836:	89 2b       	or	r24, r25
     838:	09 f0       	breq	.+2      	; 0x83c <_ZN14OneSheeldClass12processFrameEv+0xa8>
     83a:	4e c0       	rjmp	.+156    	; 0x8d8 <_ZN14OneSheeldClass12processFrameEv+0x144>
     83c:	19 82       	std	Y+1, r1	; 0x01
     83e:	d8 01       	movw	r26, r16
     840:	56 96       	adiw	r26, 0x16	; 22
     842:	ed 91       	ld	r30, X+
     844:	fc 91       	ld	r31, X
     846:	57 97       	sbiw	r26, 0x17	; 23
     848:	a1 80       	ldd	r10, Z+1	; 0x01
     84a:	b1 2c       	mov	r11, r1
     84c:	e1 2c       	mov	r14, r1
     84e:	f1 2c       	mov	r15, r1
     850:	c1 2c       	mov	r12, r1
     852:	d1 2c       	mov	r13, r1
     854:	ea 14       	cp	r14, r10
     856:	fb 04       	cpc	r15, r11
     858:	74 f4       	brge	.+28     	; 0x876 <_ZN14OneSheeldClass12processFrameEv+0xe2>
     85a:	61 e0       	ldi	r22, 0x01	; 1
     85c:	c8 01       	movw	r24, r16
     85e:	0e 94 c6 01 	call	0x38c	; 0x38c <_ZN14OneSheeldClass15getArgumentDataEh>
     862:	8e 0d       	add	r24, r14
     864:	9f 1d       	adc	r25, r15
     866:	fc 01       	movw	r30, r24
     868:	80 81       	ld	r24, Z
     86a:	c8 0e       	add	r12, r24
     86c:	d1 1c       	adc	r13, r1
     86e:	ff ef       	ldi	r31, 0xFF	; 255
     870:	ef 1a       	sub	r14, r31
     872:	ff 0a       	sbc	r15, r31
     874:	ef cf       	rjmp	.-34     	; 0x854 <_ZN14OneSheeldClass12processFrameEv+0xc0>
     876:	c9 82       	std	Y+1, r12	; 0x01
     878:	84 e0       	ldi	r24, 0x04	; 4
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <_Znwj>
     880:	7c 01       	movw	r14, r24
     882:	dc 01       	movw	r26, r24
     884:	13 96       	adiw	r26, 0x03	; 3
     886:	1c 92       	st	X, r1
     888:	13 97       	sbiw	r26, 0x03	; 3
     88a:	81 e0       	ldi	r24, 0x01	; 1
     88c:	8c 93       	st	X, r24
     88e:	ce 01       	movw	r24, r28
     890:	01 96       	adiw	r24, 0x01	; 1
     892:	12 96       	adiw	r26, 0x02	; 2
     894:	9c 93       	st	X, r25
     896:	8e 93       	st	-X, r24
     898:	11 97       	sbiw	r26, 0x01	; 1
     89a:	84 e0       	ldi	r24, 0x04	; 4
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <_Znwj>
     8a2:	fc 01       	movw	r30, r24
     8a4:	13 82       	std	Z+3, r1	; 0x03
     8a6:	87 e1       	ldi	r24, 0x17	; 23
     8a8:	80 83       	st	Z, r24
     8aa:	85 e2       	ldi	r24, 0x25	; 37
     8ac:	91 e0       	ldi	r25, 0x01	; 1
     8ae:	92 83       	std	Z+2, r25	; 0x02
     8b0:	81 83       	std	Z+1, r24	; 0x01
     8b2:	ff 92       	push	r15
     8b4:	ef 92       	push	r14
     8b6:	ff 93       	push	r31
     8b8:	ef 93       	push	r30
     8ba:	82 e0       	ldi	r24, 0x02	; 2
     8bc:	8f 93       	push	r24
     8be:	85 e0       	ldi	r24, 0x05	; 5
     8c0:	8f 93       	push	r24
     8c2:	1f 92       	push	r1
     8c4:	1f 92       	push	r1
     8c6:	1f 93       	push	r17
     8c8:	0f 93       	push	r16
     8ca:	0e 94 3e 02 	call	0x47c	; 0x47c <_ZN14OneSheeldClass15sendShieldFrameEhhhhz>
     8ce:	0f b6       	in	r0, 0x3f	; 63
     8d0:	f8 94       	cli
     8d2:	de bf       	out	0x3e, r29	; 62
     8d4:	0f be       	out	0x3f, r0	; 63
     8d6:	cd bf       	out	0x3d, r28	; 61
     8d8:	0f 90       	pop	r0
     8da:	df 91       	pop	r29
     8dc:	cf 91       	pop	r28
     8de:	1f 91       	pop	r17
     8e0:	0f 91       	pop	r16
     8e2:	ff 90       	pop	r15
     8e4:	ef 90       	pop	r14
     8e6:	df 90       	pop	r13
     8e8:	cf 90       	pop	r12
     8ea:	bf 90       	pop	r11
     8ec:	af 90       	pop	r10
     8ee:	08 95       	ret

000008f0 <_ZN14OneSheeldClass13sendToShieldsEv>:
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	cf 93       	push	r28
     8f6:	df 93       	push	r29
     8f8:	20 91 11 02 	lds	r18, 0x0211
     8fc:	22 23       	and	r18, r18
     8fe:	29 f0       	breq	.+10     	; 0x90a <__stack+0xb>
     900:	08 e2       	ldi	r16, 0x28	; 40
     902:	12 e0       	ldi	r17, 0x02	; 2
     904:	c0 e0       	ldi	r28, 0x00	; 0
     906:	d0 e0       	ldi	r29, 0x00	; 0
     908:	06 c0       	rjmp	.+12     	; 0x916 <__stack+0x17>
     90a:	df 91       	pop	r29
     90c:	cf 91       	pop	r28
     90e:	1f 91       	pop	r17
     910:	0f 91       	pop	r16
     912:	0c 94 ca 03 	jmp	0x794	; 0x794 <_ZN14OneSheeldClass12processFrameEv>
     916:	80 91 83 02 	lds	r24, 0x0283
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	c8 17       	cp	r28, r24
     91e:	d9 07       	cpc	r29, r25
     920:	6c f4       	brge	.+26     	; 0x93c <__stack+0x3d>
     922:	d8 01       	movw	r26, r16
     924:	8d 91       	ld	r24, X+
     926:	9d 91       	ld	r25, X+
     928:	8d 01       	movw	r16, r26
     92a:	dc 01       	movw	r26, r24
     92c:	ed 91       	ld	r30, X+
     92e:	fc 91       	ld	r31, X
     930:	01 90       	ld	r0, Z+
     932:	f0 81       	ld	r31, Z
     934:	e0 2d       	mov	r30, r0
     936:	09 95       	icall
     938:	21 96       	adiw	r28, 0x01	; 1
     93a:	ed cf       	rjmp	.-38     	; 0x916 <__stack+0x17>
     93c:	df 91       	pop	r29
     93e:	cf 91       	pop	r28
     940:	1f 91       	pop	r17
     942:	0f 91       	pop	r16
     944:	08 95       	ret

00000946 <_ZN14OneSheeldClass17enteringACallbackEv>:
     946:	cf 93       	push	r28
     948:	df 93       	push	r29
     94a:	ec 01       	movw	r28, r24
     94c:	0e 94 23 02 	call	0x446	; 0x446 <_ZN14OneSheeldClass13isInACallbackEv>
     950:	81 11       	cpse	r24, r1
     952:	14 c0       	rjmp	.+40     	; 0x97c <_ZN14OneSheeldClass17enteringACallbackEv+0x36>
     954:	81 e0       	ldi	r24, 0x01	; 1
     956:	80 93 7e 02 	sts	0x027E, r24
     95a:	8a 87       	std	Y+10, r24	; 0x0a
     95c:	1f 92       	push	r1
     95e:	83 e0       	ldi	r24, 0x03	; 3
     960:	8f 93       	push	r24
     962:	1f 92       	push	r1
     964:	1f 92       	push	r1
     966:	df 93       	push	r29
     968:	cf 93       	push	r28
     96a:	0e 94 3e 02 	call	0x47c	; 0x47c <_ZN14OneSheeldClass15sendShieldFrameEhhhhz>
     96e:	1a 86       	std	Y+10, r1	; 0x0a
     970:	0f 90       	pop	r0
     972:	0f 90       	pop	r0
     974:	0f 90       	pop	r0
     976:	0f 90       	pop	r0
     978:	0f 90       	pop	r0
     97a:	0f 90       	pop	r0
     97c:	df 91       	pop	r29
     97e:	cf 91       	pop	r28
     980:	08 95       	ret

00000982 <_ZN14OneSheeldClass16exitingACallbackEv>:
     982:	cf 93       	push	r28
     984:	df 93       	push	r29
     986:	ec 01       	movw	r28, r24
     988:	0e 94 23 02 	call	0x446	; 0x446 <_ZN14OneSheeldClass13isInACallbackEv>
     98c:	88 23       	and	r24, r24
     98e:	a1 f0       	breq	.+40     	; 0x9b8 <_ZN14OneSheeldClass16exitingACallbackEv+0x36>
     990:	10 92 7e 02 	sts	0x027E, r1
     994:	81 e0       	ldi	r24, 0x01	; 1
     996:	8a 87       	std	Y+10, r24	; 0x0a
     998:	1f 92       	push	r1
     99a:	84 e0       	ldi	r24, 0x04	; 4
     99c:	8f 93       	push	r24
     99e:	1f 92       	push	r1
     9a0:	1f 92       	push	r1
     9a2:	df 93       	push	r29
     9a4:	cf 93       	push	r28
     9a6:	0e 94 3e 02 	call	0x47c	; 0x47c <_ZN14OneSheeldClass15sendShieldFrameEhhhhz>
     9aa:	1a 86       	std	Y+10, r1	; 0x0a
     9ac:	0f 90       	pop	r0
     9ae:	0f 90       	pop	r0
     9b0:	0f 90       	pop	r0
     9b2:	0f 90       	pop	r0
     9b4:	0f 90       	pop	r0
     9b6:	0f 90       	pop	r0
     9b8:	df 91       	pop	r29
     9ba:	cf 91       	pop	r28
     9bc:	08 95       	ret

000009be <_ZN14OneSheeldClass12processInputEi>:
     9be:	cf 92       	push	r12
     9c0:	df 92       	push	r13
     9c2:	ef 92       	push	r14
     9c4:	ff 92       	push	r15
     9c6:	0f 93       	push	r16
     9c8:	1f 93       	push	r17
     9ca:	cf 93       	push	r28
     9cc:	df 93       	push	r29
     9ce:	ec 01       	movw	r28, r24
     9d0:	8b 01       	movw	r16, r22
     9d2:	6f 3f       	cpi	r22, 0xFF	; 255
     9d4:	8f ef       	ldi	r24, 0xFF	; 255
     9d6:	78 07       	cpc	r23, r24
     9d8:	09 f4       	brne	.+2      	; 0x9dc <_ZN14OneSheeldClass12processInputEi+0x1e>
     9da:	6e c1       	rjmp	.+732    	; 0xcb8 <_ZN14OneSheeldClass12processInputEi+0x2fa>
     9dc:	9b 85       	ldd	r25, Y+11	; 0x0b
     9de:	91 11       	cpse	r25, r1
     9e0:	1b c0       	rjmp	.+54     	; 0xa18 <_ZN14OneSheeldClass12processInputEi+0x5a>
     9e2:	6f 3f       	cpi	r22, 0xFF	; 255
     9e4:	71 05       	cpc	r23, r1
     9e6:	c1 f4       	brne	.+48     	; 0xa18 <_ZN14OneSheeldClass12processInputEi+0x5a>
     9e8:	ce 01       	movw	r24, r28
     9ea:	0e 94 df 01 	call	0x3be	; 0x3be <_ZN14OneSheeldClass19freeMemoryAllocatedEv>
     9ee:	81 e0       	ldi	r24, 0x01	; 1
     9f0:	8b 87       	std	Y+11, r24	; 0x0b
     9f2:	1d 8a       	std	Y+21, r1	; 0x15
     9f4:	1c 8a       	std	Y+20, r1	; 0x14
     9f6:	1f 8a       	std	Y+23, r1	; 0x17
     9f8:	1e 8a       	std	Y+22, r1	; 0x16
     9fa:	88 8b       	std	Y+16, r24	; 0x10
     9fc:	6d e3       	ldi	r22, 0x3D	; 61
     9fe:	71 e0       	ldi	r23, 0x01	; 1
     a00:	89 e8       	ldi	r24, 0x89	; 137
     a02:	92 e0       	ldi	r25, 0x02	; 2
     a04:	df 91       	pop	r29
     a06:	cf 91       	pop	r28
     a08:	1f 91       	pop	r17
     a0a:	0f 91       	pop	r16
     a0c:	ff 90       	pop	r15
     a0e:	ef 90       	pop	r14
     a10:	df 90       	pop	r13
     a12:	cf 90       	pop	r12
     a14:	0c 94 2d 0a 	jmp	0x145a	; 0x145a <_ZN5Print5printEPKc>
     a18:	88 89       	ldd	r24, Y+16	; 0x10
     a1a:	84 30       	cpi	r24, 0x04	; 4
     a1c:	69 f4       	brne	.+26     	; 0xa38 <_ZN14OneSheeldClass12processInputEi+0x7a>
     a1e:	99 23       	and	r25, r25
     a20:	09 f4       	brne	.+2      	; 0xa24 <_ZN14OneSheeldClass12processInputEi+0x66>
     a22:	4a c1       	rjmp	.+660    	; 0xcb8 <_ZN14OneSheeldClass12processInputEi+0x2fa>
     a24:	61 e4       	ldi	r22, 0x41	; 65
     a26:	71 e0       	ldi	r23, 0x01	; 1
     a28:	89 e8       	ldi	r24, 0x89	; 137
     a2a:	92 e0       	ldi	r25, 0x02	; 2
     a2c:	0e 94 2d 0a 	call	0x145a	; 0x145a <_ZN5Print5printEPKc>
     a30:	1a 8a       	std	Y+18, r1	; 0x12
     a32:	19 8a       	std	Y+17, r1	; 0x11
     a34:	0b 8b       	std	Y+19, r16	; 0x13
     a36:	3d c1       	rjmp	.+634    	; 0xcb2 <_ZN14OneSheeldClass12processInputEi+0x2f4>
     a38:	85 30       	cpi	r24, 0x05	; 5
     a3a:	99 f5       	brne	.+102    	; 0xaa2 <_ZN14OneSheeldClass12processInputEi+0xe4>
     a3c:	99 23       	and	r25, r25
     a3e:	09 f4       	brne	.+2      	; 0xa42 <_ZN14OneSheeldClass12processInputEi+0x84>
     a40:	3b c1       	rjmp	.+630    	; 0xcb8 <_ZN14OneSheeldClass12processInputEi+0x2fa>
     a42:	65 e4       	ldi	r22, 0x45	; 69
     a44:	71 e0       	ldi	r23, 0x01	; 1
     a46:	89 e8       	ldi	r24, 0x89	; 137
     a48:	92 e0       	ldi	r25, 0x02	; 2
     a4a:	0e 94 2d 0a 	call	0x145a	; 0x145a <_ZN5Print5printEPKc>
     a4e:	4b 89       	ldd	r20, Y+19	; 0x13
     a50:	84 2f       	mov	r24, r20
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	2f ef       	ldi	r18, 0xFF	; 255
     a56:	30 e0       	ldi	r19, 0x00	; 0
     a58:	28 1b       	sub	r18, r24
     a5a:	39 0b       	sbc	r19, r25
     a5c:	20 17       	cp	r18, r16
     a5e:	31 07       	cpc	r19, r17
     a60:	f1 f5       	brne	.+124    	; 0xade <_ZN14OneSheeldClass12processInputEi+0x120>
     a62:	41 11       	cpse	r20, r1
     a64:	02 c0       	rjmp	.+4      	; 0xa6a <_ZN14OneSheeldClass12processInputEi+0xac>
     a66:	89 e0       	ldi	r24, 0x09	; 9
     a68:	26 c1       	rjmp	.+588    	; 0xcb6 <_ZN14OneSheeldClass12processInputEi+0x2f8>
     a6a:	88 0f       	add	r24, r24
     a6c:	99 1f       	adc	r25, r25
     a6e:	0e 94 0c 0b 	call	0x1618	; 0x1618 <malloc>
     a72:	9d 8b       	std	Y+21, r25	; 0x15
     a74:	8c 8b       	std	Y+20, r24	; 0x14
     a76:	69 e4       	ldi	r22, 0x49	; 73
     a78:	71 e0       	ldi	r23, 0x01	; 1
     a7a:	89 e8       	ldi	r24, 0x89	; 137
     a7c:	92 e0       	ldi	r25, 0x02	; 2
     a7e:	0e 94 2d 0a 	call	0x145a	; 0x145a <_ZN5Print5printEPKc>
     a82:	11 e0       	ldi	r17, 0x01	; 1
     a84:	1c 83       	std	Y+4, r17	; 0x04
     a86:	8b 89       	ldd	r24, Y+19	; 0x13
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	0e 94 0c 0b 	call	0x1618	; 0x1618 <malloc>
     a8e:	9f 8b       	std	Y+23, r25	; 0x17
     a90:	8e 8b       	std	Y+22, r24	; 0x16
     a92:	6d e4       	ldi	r22, 0x4D	; 77
     a94:	71 e0       	ldi	r23, 0x01	; 1
     a96:	89 e8       	ldi	r24, 0x89	; 137
     a98:	92 e0       	ldi	r25, 0x02	; 2
     a9a:	0e 94 2d 0a 	call	0x145a	; 0x145a <_ZN5Print5printEPKc>
     a9e:	1d 83       	std	Y+5, r17	; 0x05
     aa0:	08 c1       	rjmp	.+528    	; 0xcb2 <_ZN14OneSheeldClass12processInputEi+0x2f4>
     aa2:	86 30       	cpi	r24, 0x06	; 6
     aa4:	f1 f0       	breq	.+60     	; 0xae2 <_ZN14OneSheeldClass12processInputEi+0x124>
     aa6:	87 30       	cpi	r24, 0x07	; 7
     aa8:	09 f0       	breq	.+2      	; 0xaac <_ZN14OneSheeldClass12processInputEi+0xee>
     aaa:	55 c0       	rjmp	.+170    	; 0xb56 <_ZN14OneSheeldClass12processInputEi+0x198>
     aac:	99 23       	and	r25, r25
     aae:	09 f4       	brne	.+2      	; 0xab2 <_ZN14OneSheeldClass12processInputEi+0xf4>
     ab0:	03 c1       	rjmp	.+518    	; 0xcb8 <_ZN14OneSheeldClass12processInputEi+0x2fa>
     ab2:	65 e5       	ldi	r22, 0x55	; 85
     ab4:	71 e0       	ldi	r23, 0x01	; 1
     ab6:	89 e8       	ldi	r24, 0x89	; 137
     ab8:	92 e0       	ldi	r25, 0x02	; 2
     aba:	0e 94 2d 0a 	call	0x145a	; 0x145a <_ZN5Print5printEPKc>
     abe:	29 89       	ldd	r18, Y+17	; 0x11
     ac0:	30 e0       	ldi	r19, 0x00	; 0
     ac2:	ee 89       	ldd	r30, Y+22	; 0x16
     ac4:	ff 89       	ldd	r31, Y+23	; 0x17
     ac6:	e2 0f       	add	r30, r18
     ac8:	f3 1f       	adc	r31, r19
     aca:	60 81       	ld	r22, Z
     acc:	86 2f       	mov	r24, r22
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	4f ef       	ldi	r20, 0xFF	; 255
     ad2:	50 e0       	ldi	r21, 0x00	; 0
     ad4:	48 1b       	sub	r20, r24
     ad6:	59 0b       	sbc	r21, r25
     ad8:	40 17       	cp	r20, r16
     ada:	51 07       	cpc	r21, r17
     adc:	91 f0       	breq	.+36     	; 0xb02 <_ZN14OneSheeldClass12processInputEi+0x144>
     ade:	1b 86       	std	Y+11, r1	; 0x0b
     ae0:	94 c0       	rjmp	.+296    	; 0xc0a <_ZN14OneSheeldClass12processInputEi+0x24c>
     ae2:	99 23       	and	r25, r25
     ae4:	09 f4       	brne	.+2      	; 0xae8 <_ZN14OneSheeldClass12processInputEi+0x12a>
     ae6:	e8 c0       	rjmp	.+464    	; 0xcb8 <_ZN14OneSheeldClass12processInputEi+0x2fa>
     ae8:	61 e5       	ldi	r22, 0x51	; 81
     aea:	71 e0       	ldi	r23, 0x01	; 1
     aec:	89 e8       	ldi	r24, 0x89	; 137
     aee:	92 e0       	ldi	r25, 0x02	; 2
     af0:	0e 94 2d 0a 	call	0x145a	; 0x145a <_ZN5Print5printEPKc>
     af4:	89 89       	ldd	r24, Y+17	; 0x11
     af6:	ee 89       	ldd	r30, Y+22	; 0x16
     af8:	ff 89       	ldd	r31, Y+23	; 0x17
     afa:	e8 0f       	add	r30, r24
     afc:	f1 1d       	adc	r31, r1
     afe:	00 83       	st	Z, r16
     b00:	d8 c0       	rjmp	.+432    	; 0xcb2 <_ZN14OneSheeldClass12processInputEi+0x2f4>
     b02:	22 0f       	add	r18, r18
     b04:	33 1f       	adc	r19, r19
     b06:	0c 89       	ldd	r16, Y+20	; 0x14
     b08:	1d 89       	ldd	r17, Y+21	; 0x15
     b0a:	66 23       	and	r22, r22
     b0c:	81 f0       	breq	.+32     	; 0xb2e <_ZN14OneSheeldClass12processInputEi+0x170>
     b0e:	02 0f       	add	r16, r18
     b10:	13 1f       	adc	r17, r19
     b12:	0e 94 0c 0b 	call	0x1618	; 0x1618 <malloc>
     b16:	f8 01       	movw	r30, r16
     b18:	91 83       	std	Z+1, r25	; 0x01
     b1a:	80 83       	st	Z, r24
     b1c:	69 e5       	ldi	r22, 0x59	; 89
     b1e:	71 e0       	ldi	r23, 0x01	; 1
     b20:	89 e8       	ldi	r24, 0x89	; 137
     b22:	92 e0       	ldi	r25, 0x02	; 2
     b24:	0e 94 2d 0a 	call	0x145a	; 0x145a <_ZN5Print5printEPKc>
     b28:	88 89       	ldd	r24, Y+16	; 0x10
     b2a:	8f 5f       	subi	r24, 0xFF	; 255
     b2c:	0f c0       	rjmp	.+30     	; 0xb4c <_ZN14OneSheeldClass12processInputEi+0x18e>
     b2e:	f8 01       	movw	r30, r16
     b30:	e2 0f       	add	r30, r18
     b32:	f3 1f       	adc	r31, r19
     b34:	11 82       	std	Z+1, r1	; 0x01
     b36:	10 82       	st	Z, r1
     b38:	1a 8a       	std	Y+18, r1	; 0x12
     b3a:	89 89       	ldd	r24, Y+17	; 0x11
     b3c:	8f 5f       	subi	r24, 0xFF	; 255
     b3e:	89 8b       	std	Y+17, r24	; 0x11
     b40:	9b 89       	ldd	r25, Y+19	; 0x13
     b42:	89 13       	cpse	r24, r25
     b44:	02 c0       	rjmp	.+4      	; 0xb4a <_ZN14OneSheeldClass12processInputEi+0x18c>
     b46:	89 e0       	ldi	r24, 0x09	; 9
     b48:	01 c0       	rjmp	.+2      	; 0xb4c <_ZN14OneSheeldClass12processInputEi+0x18e>
     b4a:	86 e0       	ldi	r24, 0x06	; 6
     b4c:	88 8b       	std	Y+16, r24	; 0x10
     b4e:	8c 85       	ldd	r24, Y+12	; 0x0c
     b50:	8f 5f       	subi	r24, 0xFF	; 255
     b52:	8c 87       	std	Y+12, r24	; 0x0c
     b54:	b1 c0       	rjmp	.+354    	; 0xcb8 <_ZN14OneSheeldClass12processInputEi+0x2fa>
     b56:	88 30       	cpi	r24, 0x08	; 8
     b58:	81 f5       	brne	.+96     	; 0xbba <_ZN14OneSheeldClass12processInputEi+0x1fc>
     b5a:	99 23       	and	r25, r25
     b5c:	09 f4       	brne	.+2      	; 0xb60 <_ZN14OneSheeldClass12processInputEi+0x1a2>
     b5e:	ac c0       	rjmp	.+344    	; 0xcb8 <_ZN14OneSheeldClass12processInputEi+0x2fa>
     b60:	6d e5       	ldi	r22, 0x5D	; 93
     b62:	71 e0       	ldi	r23, 0x01	; 1
     b64:	89 e8       	ldi	r24, 0x89	; 137
     b66:	92 e0       	ldi	r25, 0x02	; 2
     b68:	0e 94 2d 0a 	call	0x145a	; 0x145a <_ZN5Print5printEPKc>
     b6c:	89 89       	ldd	r24, Y+17	; 0x11
     b6e:	2c 89       	ldd	r18, Y+20	; 0x14
     b70:	9d 89       	ldd	r25, Y+21	; 0x15
     b72:	e2 2f       	mov	r30, r18
     b74:	f9 2f       	mov	r31, r25
     b76:	e8 0f       	add	r30, r24
     b78:	f1 1d       	adc	r31, r1
     b7a:	e8 0f       	add	r30, r24
     b7c:	f1 1d       	adc	r31, r1
     b7e:	80 81       	ld	r24, Z
     b80:	91 81       	ldd	r25, Z+1	; 0x01
     b82:	00 97       	sbiw	r24, 0x00	; 0
     b84:	41 f0       	breq	.+16     	; 0xb96 <_ZN14OneSheeldClass12processInputEi+0x1d8>
     b86:	2a 89       	ldd	r18, Y+18	; 0x12
     b88:	31 e0       	ldi	r19, 0x01	; 1
     b8a:	32 0f       	add	r19, r18
     b8c:	3a 8b       	std	Y+18, r19	; 0x12
     b8e:	fc 01       	movw	r30, r24
     b90:	e2 0f       	add	r30, r18
     b92:	f1 1d       	adc	r31, r1
     b94:	00 83       	st	Z, r16
     b96:	89 89       	ldd	r24, Y+17	; 0x11
     b98:	ee 89       	ldd	r30, Y+22	; 0x16
     b9a:	ff 89       	ldd	r31, Y+23	; 0x17
     b9c:	e8 0f       	add	r30, r24
     b9e:	f1 1d       	adc	r31, r1
     ba0:	2a 89       	ldd	r18, Y+18	; 0x12
     ba2:	90 81       	ld	r25, Z
     ba4:	29 13       	cpse	r18, r25
     ba6:	88 c0       	rjmp	.+272    	; 0xcb8 <_ZN14OneSheeldClass12processInputEi+0x2fa>
     ba8:	1a 8a       	std	Y+18, r1	; 0x12
     baa:	8f 5f       	subi	r24, 0xFF	; 255
     bac:	89 8b       	std	Y+17, r24	; 0x11
     bae:	9b 89       	ldd	r25, Y+19	; 0x13
     bb0:	89 17       	cp	r24, r25
     bb2:	09 f4       	brne	.+2      	; 0xbb6 <_ZN14OneSheeldClass12processInputEi+0x1f8>
     bb4:	7e c0       	rjmp	.+252    	; 0xcb2 <_ZN14OneSheeldClass12processInputEi+0x2f4>
     bb6:	86 e0       	ldi	r24, 0x06	; 6
     bb8:	7e c0       	rjmp	.+252    	; 0xcb6 <_ZN14OneSheeldClass12processInputEi+0x2f8>
     bba:	89 30       	cpi	r24, 0x09	; 9
     bbc:	89 f5       	brne	.+98     	; 0xc20 <_ZN14OneSheeldClass12processInputEi+0x262>
     bbe:	99 23       	and	r25, r25
     bc0:	09 f4       	brne	.+2      	; 0xbc4 <_ZN14OneSheeldClass12processInputEi+0x206>
     bc2:	7a c0       	rjmp	.+244    	; 0xcb8 <_ZN14OneSheeldClass12processInputEi+0x2fa>
     bc4:	61 e6       	ldi	r22, 0x61	; 97
     bc6:	71 e0       	ldi	r23, 0x01	; 1
     bc8:	89 e8       	ldi	r24, 0x89	; 137
     bca:	92 e0       	ldi	r25, 0x02	; 2
     bcc:	0e 94 2d 0a 	call	0x145a	; 0x145a <_ZN5Print5printEPKc>
     bd0:	08 8f       	std	Y+24, r16	; 0x18
     bd2:	01 11       	cpse	r16, r1
     bd4:	1a c0       	rjmp	.+52     	; 0xc0a <_ZN14OneSheeldClass12processInputEi+0x24c>
     bd6:	1b 86       	std	Y+11, r1	; 0x0b
     bd8:	ce 01       	movw	r24, r28
     bda:	0e 94 78 04 	call	0x8f0	; 0x8f0 <_ZN14OneSheeldClass13sendToShieldsEv>
     bde:	88 85       	ldd	r24, Y+8	; 0x08
     be0:	88 23       	and	r24, r24
     be2:	99 f0       	breq	.+38     	; 0xc0a <_ZN14OneSheeldClass12processInputEi+0x24c>
     be4:	8d 85       	ldd	r24, Y+13	; 0x0d
     be6:	88 23       	and	r24, r24
     be8:	81 f0       	breq	.+32     	; 0xc0a <_ZN14OneSheeldClass12processInputEi+0x24c>
     bea:	ce 01       	movw	r24, r28
     bec:	0e 94 a3 04 	call	0x946	; 0x946 <_ZN14OneSheeldClass17enteringACallbackEv>
     bf0:	0c 89       	ldd	r16, Y+20	; 0x14
     bf2:	1d 89       	ldd	r17, Y+21	; 0x15
     bf4:	2e 89       	ldd	r18, Y+22	; 0x16
     bf6:	3f 89       	ldd	r19, Y+23	; 0x17
     bf8:	eb 8d       	ldd	r30, Y+27	; 0x1b
     bfa:	fc 8d       	ldd	r31, Y+28	; 0x1c
     bfc:	4b 89       	ldd	r20, Y+19	; 0x13
     bfe:	6f 85       	ldd	r22, Y+15	; 0x0f
     c00:	8d 85       	ldd	r24, Y+13	; 0x0d
     c02:	09 95       	icall
     c04:	ce 01       	movw	r24, r28
     c06:	0e 94 c1 04 	call	0x982	; 0x982 <_ZN14OneSheeldClass16exitingACallbackEv>
     c0a:	ce 01       	movw	r24, r28
     c0c:	df 91       	pop	r29
     c0e:	cf 91       	pop	r28
     c10:	1f 91       	pop	r17
     c12:	0f 91       	pop	r16
     c14:	ff 90       	pop	r15
     c16:	ef 90       	pop	r14
     c18:	df 90       	pop	r13
     c1a:	cf 90       	pop	r12
     c1c:	0c 94 df 01 	jmp	0x3be	; 0x3be <_ZN14OneSheeldClass19freeMemoryAllocatedEv>
     c20:	99 23       	and	r25, r25
     c22:	09 f4       	brne	.+2      	; 0xc26 <_ZN14OneSheeldClass12processInputEi+0x268>
     c24:	49 c0       	rjmp	.+146    	; 0xcb8 <_ZN14OneSheeldClass12processInputEi+0x2fa>
     c26:	81 30       	cpi	r24, 0x01	; 1
     c28:	31 f5       	brne	.+76     	; 0xc76 <_ZN14OneSheeldClass12processInputEi+0x2b8>
     c2a:	0d 87       	std	Y+13, r16	; 0x0d
     c2c:	00 23       	and	r16, r16
     c2e:	09 f4       	brne	.+2      	; 0xc32 <_ZN14OneSheeldClass12processInputEi+0x274>
     c30:	40 c0       	rjmp	.+128    	; 0xcb2 <_ZN14OneSheeldClass12processInputEi+0x2f4>
     c32:	88 85       	ldd	r24, Y+8	; 0x08
     c34:	81 11       	cpse	r24, r1
     c36:	3d c0       	rjmp	.+122    	; 0xcb2 <_ZN14OneSheeldClass12processInputEi+0x2f4>
     c38:	38 e2       	ldi	r19, 0x28	; 40
     c3a:	c3 2e       	mov	r12, r19
     c3c:	32 e0       	ldi	r19, 0x02	; 2
     c3e:	d3 2e       	mov	r13, r19
     c40:	00 e0       	ldi	r16, 0x00	; 0
     c42:	10 e0       	ldi	r17, 0x00	; 0
     c44:	f1 2c       	mov	r15, r1
     c46:	80 91 83 02 	lds	r24, 0x0283
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	08 17       	cp	r16, r24
     c4e:	19 07       	cpc	r17, r25
     c50:	74 f4       	brge	.+28     	; 0xc6e <_ZN14OneSheeldClass12processInputEi+0x2b0>
     c52:	ed 84       	ldd	r14, Y+13	; 0x0d
     c54:	f6 01       	movw	r30, r12
     c56:	81 91       	ld	r24, Z+
     c58:	91 91       	ld	r25, Z+
     c5a:	6f 01       	movw	r12, r30
     c5c:	0e 94 b5 06 	call	0xd6a	; 0xd6a <_ZN12ShieldParent11getShieldIdEv>
     c60:	e8 12       	cpse	r14, r24
     c62:	02 c0       	rjmp	.+4      	; 0xc68 <_ZN14OneSheeldClass12processInputEi+0x2aa>
     c64:	ff 24       	eor	r15, r15
     c66:	f3 94       	inc	r15
     c68:	0f 5f       	subi	r16, 0xFF	; 255
     c6a:	1f 4f       	sbci	r17, 0xFF	; 255
     c6c:	ec cf       	rjmp	.-40     	; 0xc46 <_ZN14OneSheeldClass12processInputEi+0x288>
     c6e:	ff 20       	and	r15, r15
     c70:	09 f4       	brne	.+2      	; 0xc74 <_ZN14OneSheeldClass12processInputEi+0x2b6>
     c72:	35 cf       	rjmp	.-406    	; 0xade <_ZN14OneSheeldClass12processInputEi+0x120>
     c74:	1e c0       	rjmp	.+60     	; 0xcb2 <_ZN14OneSheeldClass12processInputEi+0x2f4>
     c76:	82 30       	cpi	r24, 0x02	; 2
     c78:	99 f4       	brne	.+38     	; 0xca0 <_ZN14OneSheeldClass12processInputEi+0x2e2>
     c7a:	0e 87       	std	Y+14, r16	; 0x0e
     c7c:	8f ef       	ldi	r24, 0xFF	; 255
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	80 1b       	sub	r24, r16
     c82:	91 09       	sbc	r25, r1
     c84:	24 e0       	ldi	r18, 0x04	; 4
     c86:	95 95       	asr	r25
     c88:	87 95       	ror	r24
     c8a:	2a 95       	dec	r18
     c8c:	e1 f7       	brne	.-8      	; 0xc86 <_ZN14OneSheeldClass12processInputEi+0x2c8>
     c8e:	0f 70       	andi	r16, 0x0F	; 15
     c90:	10 e0       	ldi	r17, 0x00	; 0
     c92:	80 17       	cp	r24, r16
     c94:	91 07       	cpc	r25, r17
     c96:	09 f0       	breq	.+2      	; 0xc9a <_ZN14OneSheeldClass12processInputEi+0x2dc>
     c98:	1b 86       	std	Y+11, r1	; 0x0b
     c9a:	65 e6       	ldi	r22, 0x65	; 101
     c9c:	71 e0       	ldi	r23, 0x01	; 1
     c9e:	05 c0       	rjmp	.+10     	; 0xcaa <_ZN14OneSheeldClass12processInputEi+0x2ec>
     ca0:	83 30       	cpi	r24, 0x03	; 3
     ca2:	39 f4       	brne	.+14     	; 0xcb2 <_ZN14OneSheeldClass12processInputEi+0x2f4>
     ca4:	0f 87       	std	Y+15, r16	; 0x0f
     ca6:	69 e6       	ldi	r22, 0x69	; 105
     ca8:	71 e0       	ldi	r23, 0x01	; 1
     caa:	89 e8       	ldi	r24, 0x89	; 137
     cac:	92 e0       	ldi	r25, 0x02	; 2
     cae:	0e 94 2d 0a 	call	0x145a	; 0x145a <_ZN5Print5printEPKc>
     cb2:	88 89       	ldd	r24, Y+16	; 0x10
     cb4:	8f 5f       	subi	r24, 0xFF	; 255
     cb6:	88 8b       	std	Y+16, r24	; 0x10
     cb8:	df 91       	pop	r29
     cba:	cf 91       	pop	r28
     cbc:	1f 91       	pop	r17
     cbe:	0f 91       	pop	r16
     cc0:	ff 90       	pop	r15
     cc2:	ef 90       	pop	r14
     cc4:	df 90       	pop	r13
     cc6:	cf 90       	pop	r12
     cc8:	08 95       	ret

00000cca <_GLOBAL__sub_I__ZN14OneSheeldClass6isInitE>:
      {
        if(OneSheeldSerial->available())
          OneSheeld.processInput(OneSheeldSerial->read());
      }
}
OneSheeldClass OneSheeld;
     cca:	84 e0       	ldi	r24, 0x04	; 4
     ccc:	92 e0       	ldi	r25, 0x02	; 2
     cce:	0c 94 6d 01 	jmp	0x2da	; 0x2da <_ZN14OneSheeldClassC1Ev>

00000cd2 <_ZN12PrintlnClassC1Ehhh>:
	char stringPointer[14];
	snprintf(stringPointer,13,"%lu",data);
	strcat(stringPointer,"\r\n");
	
	print(stringPointer);
}
     cd2:	0c 94 0d 08 	jmp	0x101a	; 0x101a <_ZN10PrintClassC1Ehhh>

00000cd6 <_ZN12PrintlnClass7printlnEPKc>:
//Print string with newline
void PrintlnClass::println(const char * stringData)
{
     cd6:	cf 92       	push	r12
     cd8:	df 92       	push	r13
     cda:	ef 92       	push	r14
     cdc:	ff 92       	push	r15
     cde:	0f 93       	push	r16
     ce0:	1f 93       	push	r17
     ce2:	cf 93       	push	r28
     ce4:	df 93       	push	r29
     ce6:	cd b7       	in	r28, 0x3d	; 61
     ce8:	de b7       	in	r29, 0x3e	; 62
     cea:	6c 01       	movw	r12, r24
	stringNewLine[0]='\0';
	strcat(stringNewLine,stringData);
	strcat(stringNewLine,"\r\n");

	print(stringNewLine);
}
     cec:	ed b6       	in	r14, 0x3d	; 61
     cee:	fe b6       	in	r15, 0x3e	; 62
	print(stringPointer);
}
//Print string with newline
void PrintlnClass::println(const char * stringData)
{
	char stringNewLine[strlen(stringData)+3];
     cf0:	fb 01       	movw	r30, r22
     cf2:	01 90       	ld	r0, Z+
     cf4:	00 20       	and	r0, r0
     cf6:	e9 f7       	brne	.-6      	; 0xcf2 <_ZN12PrintlnClass7printlnEPKc+0x1c>
     cf8:	9f 01       	movw	r18, r30
     cfa:	26 1b       	sub	r18, r22
     cfc:	37 0b       	sbc	r19, r23
     cfe:	2e 5f       	subi	r18, 0xFE	; 254
     d00:	3f 4f       	sbci	r19, 0xFF	; 255
     d02:	8d b7       	in	r24, 0x3d	; 61
     d04:	9e b7       	in	r25, 0x3e	; 62
     d06:	82 1b       	sub	r24, r18
     d08:	93 0b       	sbc	r25, r19
     d0a:	0f b6       	in	r0, 0x3f	; 63
     d0c:	f8 94       	cli
     d0e:	9e bf       	out	0x3e, r25	; 62
     d10:	0f be       	out	0x3f, r0	; 63
     d12:	8d bf       	out	0x3d, r24	; 61
     d14:	0d b7       	in	r16, 0x3d	; 61
     d16:	1e b7       	in	r17, 0x3e	; 62
     d18:	0f 5f       	subi	r16, 0xFF	; 255
     d1a:	1f 4f       	sbci	r17, 0xFF	; 255
	stringNewLine[0]='\0';
     d1c:	ed b7       	in	r30, 0x3d	; 61
     d1e:	fe b7       	in	r31, 0x3e	; 62
     d20:	11 82       	std	Z+1, r1	; 0x01
	strcat(stringNewLine,stringData);
     d22:	c8 01       	movw	r24, r16
     d24:	0e 94 a2 0c 	call	0x1944	; 0x1944 <strcat>
	strcat(stringNewLine,"\r\n");
     d28:	60 e7       	ldi	r22, 0x70	; 112
     d2a:	71 e0       	ldi	r23, 0x01	; 1
     d2c:	c8 01       	movw	r24, r16
     d2e:	0e 94 a2 0c 	call	0x1944	; 0x1944 <strcat>

	print(stringNewLine);
     d32:	b8 01       	movw	r22, r16
     d34:	c6 01       	movw	r24, r12
     d36:	0e 94 12 08 	call	0x1024	; 0x1024 <_ZN10PrintClass5printEPKc>
}
     d3a:	0f b6       	in	r0, 0x3f	; 63
     d3c:	f8 94       	cli
     d3e:	fe be       	out	0x3e, r15	; 62
     d40:	0f be       	out	0x3f, r0	; 63
     d42:	ed be       	out	0x3d, r14	; 61
     d44:	df 91       	pop	r29
     d46:	cf 91       	pop	r28
     d48:	1f 91       	pop	r17
     d4a:	0f 91       	pop	r16
     d4c:	ff 90       	pop	r15
     d4e:	ef 90       	pop	r14
     d50:	df 90       	pop	r13
     d52:	cf 90       	pop	r12
     d54:	08 95       	ret

00000d56 <_ZN12ShieldParent11processDataEv>:
  OneSheeld.exitingACallback();
}

bool ShieldParent::isInACallback()
{
  return OneSheeld.isInACallback();
     d56:	08 95       	ret

00000d58 <_ZN12ShieldParentC1Eh>:
     d58:	2f e7       	ldi	r18, 0x7F	; 127
     d5a:	31 e0       	ldi	r19, 0x01	; 1
     d5c:	fc 01       	movw	r30, r24
     d5e:	31 83       	std	Z+1, r19	; 0x01
     d60:	20 83       	st	Z, r18
     d62:	63 83       	std	Z+3, r22	; 0x03
     d64:	12 82       	std	Z+2, r1	; 0x02
     d66:	0c 94 8b 01 	jmp	0x316	; 0x316 <_ZN14OneSheeldClass17addToShieldsArrayEP12ShieldParent>

00000d6a <_ZN12ShieldParent11getShieldIdEv>:
     d6a:	fc 01       	movw	r30, r24
     d6c:	83 81       	ldd	r24, Z+3	; 0x03
     d6e:	08 95       	ret

00000d70 <_ZN12ShieldParent20setOneSheeldInstanceER14OneSheeldClass>:
}

void ShieldParent::setOneSheeldInstance(OneSheeldClass & instance)
{
	oneSheeldInstance=&instance;
     d70:	90 93 88 02 	sts	0x0288, r25
     d74:	80 93 87 02 	sts	0x0287, r24
	oneSheeldInstanceAvailable=true;
     d78:	81 e0       	ldi	r24, 0x01	; 1
     d7a:	80 93 86 02 	sts	0x0286, r24
     d7e:	08 95       	ret

00000d80 <_ZN12ShieldParent22unSetOneSheeldInstanceEv>:
}

void ShieldParent::unSetOneSheeldInstance()
{
	oneSheeldInstance=NULL;
     d80:	10 92 88 02 	sts	0x0288, r1
     d84:	10 92 87 02 	sts	0x0287, r1
	oneSheeldInstanceAvailable=false;
     d88:	10 92 86 02 	sts	0x0286, r1
     d8c:	08 95       	ret

00000d8e <_ZN12ShieldParent20getOneSheeldInstanceEv>:
}

OneSheeldClass & ShieldParent::getOneSheeldInstance()
{
	if(oneSheeldInstanceAvailable)return *oneSheeldInstance;
     d8e:	80 91 86 02 	lds	r24, 0x0286
     d92:	88 23       	and	r24, r24
     d94:	29 f0       	breq	.+10     	; 0xda0 <_ZN12ShieldParent20getOneSheeldInstanceEv+0x12>
     d96:	80 91 87 02 	lds	r24, 0x0287
     d9a:	90 91 88 02 	lds	r25, 0x0288
     d9e:	08 95       	ret
	else return OneSheeld;
     da0:	84 e0       	ldi	r24, 0x04	; 4
     da2:	92 e0       	ldi	r25, 0x02	; 2
}
     da4:	08 95       	ret

00000da6 <_ZN12ShieldParent12processFrameEv>:

void ShieldParent::processFrame()
{
     da6:	1f 93       	push	r17
     da8:	cf 93       	push	r28
     daa:	df 93       	push	r29
     dac:	ec 01       	movw	r28, r24
	if(shieldID!=getOneSheeldInstance().getShieldId())return;
     dae:	1b 81       	ldd	r17, Y+3	; 0x03
     db0:	0e 94 c7 06 	call	0xd8e	; 0xd8e <_ZN12ShieldParent20getOneSheeldInstanceEv>
     db4:	0e 94 b7 01 	call	0x36e	; 0x36e <_ZN14OneSheeldClass11getShieldIdEv>
     db8:	18 13       	cpse	r17, r24
     dba:	28 c0       	rjmp	.+80     	; 0xe0c <_ZN12ShieldParent12processFrameEv+0x66>
	byte functionID = getOneSheeldInstance().getFunctionId();
     dbc:	ce 01       	movw	r24, r28
     dbe:	0e 94 c7 06 	call	0xd8e	; 0xd8e <_ZN12ShieldParent20getOneSheeldInstanceEv>
     dc2:	0e 94 ba 01 	call	0x374	; 0x374 <_ZN14OneSheeldClass13getFunctionIdEv>

	if(functionID == CHECK_SELECTED)
     dc6:	8f 3f       	cpi	r24, 0xFF	; 255
     dc8:	b9 f4       	brne	.+46     	; 0xdf8 <_ZN12ShieldParent12processFrameEv+0x52>
	{
		if(isCallBackSet && !isInACallback())
     dca:	8a 81       	ldd	r24, Y+2	; 0x02
     dcc:	88 23       	and	r24, r24
     dce:	f1 f0       	breq	.+60     	; 0xe0c <_ZN12ShieldParent12processFrameEv+0x66>
  OneSheeld.exitingACallback();
}

bool ShieldParent::isInACallback()
{
  return OneSheeld.isInACallback();
     dd0:	84 e0       	ldi	r24, 0x04	; 4
     dd2:	92 e0       	ldi	r25, 0x02	; 2
     dd4:	0e 94 23 02 	call	0x446	; 0x446 <_ZN14OneSheeldClass13isInACallbackEv>
	if(shieldID!=getOneSheeldInstance().getShieldId())return;
	byte functionID = getOneSheeldInstance().getFunctionId();

	if(functionID == CHECK_SELECTED)
	{
		if(isCallBackSet && !isInACallback())
     dd8:	81 11       	cpse	r24, r1
     dda:	18 c0       	rjmp	.+48     	; 0xe0c <_ZN12ShieldParent12processFrameEv+0x66>
	return shieldID;
}

void ShieldParent::enteringACallback()
{
  OneSheeld.enteringACallback();
     ddc:	84 e0       	ldi	r24, 0x04	; 4
     dde:	92 e0       	ldi	r25, 0x02	; 2
     de0:	0e 94 a3 04 	call	0x946	; 0x946 <_ZN14OneSheeldClass17enteringACallbackEv>
	if(functionID == CHECK_SELECTED)
	{
		if(isCallBackSet && !isInACallback())
		{
				enteringACallback();
				(*selectedCallBack)();
     de4:	ec 81       	ldd	r30, Y+4	; 0x04
     de6:	fd 81       	ldd	r31, Y+5	; 0x05
     de8:	09 95       	icall
  OneSheeld.enteringACallback();
}

void ShieldParent::exitingACallback()
{
  OneSheeld.exitingACallback();
     dea:	84 e0       	ldi	r24, 0x04	; 4
     dec:	92 e0       	ldi	r25, 0x02	; 2
				(*selectedCallBack)();
				exitingACallback();
		}
	}
	else processData();
     dee:	df 91       	pop	r29
     df0:	cf 91       	pop	r28
     df2:	1f 91       	pop	r17
  OneSheeld.enteringACallback();
}

void ShieldParent::exitingACallback()
{
  OneSheeld.exitingACallback();
     df4:	0c 94 c1 04 	jmp	0x982	; 0x982 <_ZN14OneSheeldClass16exitingACallbackEv>
				enteringACallback();
				(*selectedCallBack)();
				exitingACallback();
		}
	}
	else processData();
     df8:	e8 81       	ld	r30, Y
     dfa:	f9 81       	ldd	r31, Y+1	; 0x01
     dfc:	02 80       	ldd	r0, Z+2	; 0x02
     dfe:	f3 81       	ldd	r31, Z+3	; 0x03
     e00:	e0 2d       	mov	r30, r0
     e02:	ce 01       	movw	r24, r28
     e04:	df 91       	pop	r29
     e06:	cf 91       	pop	r28
     e08:	1f 91       	pop	r17
				enteringACallback();
				(*selectedCallBack)();
				exitingACallback();
		}
	}
	else processData();
     e0a:	09 94       	ijmp
     e0c:	df 91       	pop	r29
     e0e:	cf 91       	pop	r28
     e10:	1f 91       	pop	r17
     e12:	08 95       	ret

00000e14 <_ZN14TerminalShield11processDataEv>:
  return count;
}

//Terminal Incomming Data processing
void TerminalShield::processData()
{
     e14:	6f 92       	push	r6
     e16:	7f 92       	push	r7
     e18:	8f 92       	push	r8
     e1a:	9f 92       	push	r9
     e1c:	af 92       	push	r10
     e1e:	bf 92       	push	r11
     e20:	cf 92       	push	r12
     e22:	df 92       	push	r13
     e24:	ef 92       	push	r14
     e26:	ff 92       	push	r15
     e28:	0f 93       	push	r16
     e2a:	1f 93       	push	r17
     e2c:	cf 93       	push	r28
     e2e:	df 93       	push	r29
     e30:	ec 01       	movw	r28, r24
	byte functionID = getOneSheeldInstance().getFunctionId();
     e32:	0e 94 c7 06 	call	0xd8e	; 0xd8e <_ZN12ShieldParent20getOneSheeldInstanceEv>
     e36:	0e 94 ba 01 	call	0x374	; 0x374 <_ZN14OneSheeldClass13getFunctionIdEv>
     e3a:	18 2f       	mov	r17, r24
	byte dataLength = getOneSheeldInstance().getArgumentLength(0);
     e3c:	ce 01       	movw	r24, r28
     e3e:	0e 94 c7 06 	call	0xd8e	; 0xd8e <_ZN12ShieldParent20getOneSheeldInstanceEv>
     e42:	60 e0       	ldi	r22, 0x00	; 0
     e44:	0e 94 bd 01 	call	0x37a	; 0x37a <_ZN14OneSheeldClass17getArgumentLengthEh>
	if(functionID == TERMINAL_READ)
     e48:	11 30       	cpi	r17, 0x01	; 1
     e4a:	09 f0       	breq	.+2      	; 0xe4e <_ZN14TerminalShield11processDataEv+0x3a>
     e4c:	46 c0       	rjmp	.+140    	; 0xeda <_ZN14TerminalShield11processDataEv+0xc6>
     e4e:	00 e0       	ldi	r16, 0x00	; 0
     e50:	10 e0       	ldi	r17, 0x00	; 0
	{
			for (int j=0; j<dataLength; j++)
     e52:	c8 2e       	mov	r12, r24
     e54:	d1 2c       	mov	r13, r1
public:
  CircularBuffer() :
    wp_(buf_), rp_(buf_), tail_(buf_+Size),  remain_(0) {}
  ~CircularBuffer() {}
  void push(T value) {
    if(remain_==Size)return;
     e56:	5e 01       	movw	r10, r28
     e58:	ff e4       	ldi	r31, 0x4F	; 79
     e5a:	af 0e       	add	r10, r31
     e5c:	b1 1c       	adc	r11, r1
    *wp_++ = value;
     e5e:	7e 01       	movw	r14, r28
     e60:	89 e4       	ldi	r24, 0x49	; 73
     e62:	e8 0e       	add	r14, r24
     e64:	f1 1c       	adc	r15, r1
    remain_++;
    if (wp_ == tail_) wp_ = buf_;
     e66:	4e 01       	movw	r8, r28
     e68:	ad e4       	ldi	r26, 0x4D	; 77
     e6a:	8a 0e       	add	r8, r26
     e6c:	91 1c       	adc	r9, r1
     e6e:	3e 01       	movw	r6, r28
     e70:	b9 e0       	ldi	r27, 0x09	; 9
     e72:	6b 0e       	add	r6, r27
     e74:	71 1c       	adc	r7, r1
     e76:	0c 15       	cp	r16, r12
     e78:	1d 05       	cpc	r17, r13
     e7a:	7c f5       	brge	.+94     	; 0xeda <_ZN14TerminalShield11processDataEv+0xc6>
			{
				buffer.push(getOneSheeldInstance().getArgumentData(0)[j]);
     e7c:	ce 01       	movw	r24, r28
     e7e:	0e 94 c7 06 	call	0xd8e	; 0xd8e <_ZN12ShieldParent20getOneSheeldInstanceEv>
     e82:	60 e0       	ldi	r22, 0x00	; 0
     e84:	0e 94 c6 01 	call	0x38c	; 0x38c <_ZN14OneSheeldClass15getArgumentDataEh>
     e88:	80 0f       	add	r24, r16
     e8a:	91 1f       	adc	r25, r17
     e8c:	dc 01       	movw	r26, r24
     e8e:	8c 91       	ld	r24, X
public:
  CircularBuffer() :
    wp_(buf_), rp_(buf_), tail_(buf_+Size),  remain_(0) {}
  ~CircularBuffer() {}
  void push(T value) {
    if(remain_==Size)return;
     e90:	f5 01       	movw	r30, r10
     e92:	20 81       	ld	r18, Z
     e94:	31 81       	ldd	r19, Z+1	; 0x01
     e96:	20 34       	cpi	r18, 0x40	; 64
     e98:	31 05       	cpc	r19, r1
     e9a:	e1 f0       	breq	.+56     	; 0xed4 <_ZN14TerminalShield11processDataEv+0xc0>
    *wp_++ = value;
     e9c:	d7 01       	movw	r26, r14
     e9e:	ed 91       	ld	r30, X+
     ea0:	fc 91       	ld	r31, X
     ea2:	11 97       	sbiw	r26, 0x01	; 1
     ea4:	9f 01       	movw	r18, r30
     ea6:	2f 5f       	subi	r18, 0xFF	; 255
     ea8:	3f 4f       	sbci	r19, 0xFF	; 255
     eaa:	11 96       	adiw	r26, 0x01	; 1
     eac:	3c 93       	st	X, r19
     eae:	2e 93       	st	-X, r18
     eb0:	80 83       	st	Z, r24
    remain_++;
     eb2:	f5 01       	movw	r30, r10
     eb4:	80 81       	ld	r24, Z
     eb6:	91 81       	ldd	r25, Z+1	; 0x01
     eb8:	01 96       	adiw	r24, 0x01	; 1
     eba:	91 83       	std	Z+1, r25	; 0x01
     ebc:	80 83       	st	Z, r24
    if (wp_ == tail_) wp_ = buf_;
     ebe:	2d 91       	ld	r18, X+
     ec0:	3c 91       	ld	r19, X
     ec2:	d4 01       	movw	r26, r8
     ec4:	8d 91       	ld	r24, X+
     ec6:	9c 91       	ld	r25, X
     ec8:	28 17       	cp	r18, r24
     eca:	39 07       	cpc	r19, r25
     ecc:	19 f4       	brne	.+6      	; 0xed4 <_ZN14TerminalShield11processDataEv+0xc0>
     ece:	f7 01       	movw	r30, r14
     ed0:	71 82       	std	Z+1, r7	; 0x01
     ed2:	60 82       	st	Z, r6
{
	byte functionID = getOneSheeldInstance().getFunctionId();
	byte dataLength = getOneSheeldInstance().getArgumentLength(0);
	if(functionID == TERMINAL_READ)
	{
			for (int j=0; j<dataLength; j++)
     ed4:	0f 5f       	subi	r16, 0xFF	; 255
     ed6:	1f 4f       	sbci	r17, 0xFF	; 255
     ed8:	ce cf       	rjmp	.-100    	; 0xe76 <_ZN14TerminalShield11processDataEv+0x62>
			{
				buffer.push(getOneSheeldInstance().getArgumentData(0)[j]);
			}
	}
}
     eda:	df 91       	pop	r29
     edc:	cf 91       	pop	r28
     ede:	1f 91       	pop	r17
     ee0:	0f 91       	pop	r16
     ee2:	ff 90       	pop	r15
     ee4:	ef 90       	pop	r14
     ee6:	df 90       	pop	r13
     ee8:	cf 90       	pop	r12
     eea:	bf 90       	pop	r11
     eec:	af 90       	pop	r10
     eee:	9f 90       	pop	r9
     ef0:	8f 90       	pop	r8
     ef2:	7f 90       	pop	r7
     ef4:	6f 90       	pop	r6
     ef6:	08 95       	ret

00000ef8 <_ZN14TerminalShieldC1Ev>:
#define FROM_ONESHEELD_LIBRARY
#include "OneSheeld.h"
#include "TerminalShield.h"

//Constructor
TerminalShield::TerminalShield():PrintlnClass(TERMINAL_ID,TERMINAL_WRITE,TERMINAL_PRINT),ShieldParent(TERMINAL_ID)
     ef8:	cf 93       	push	r28
     efa:	df 93       	push	r29
     efc:	ec 01       	movw	r28, r24
     efe:	22 e0       	ldi	r18, 0x02	; 2
     f00:	41 e0       	ldi	r20, 0x01	; 1
     f02:	66 e2       	ldi	r22, 0x26	; 38
     f04:	06 96       	adiw	r24, 0x06	; 6
     f06:	0e 94 69 06 	call	0xcd2	; 0xcd2 <_ZN12PrintlnClassC1Ehhh>
     f0a:	66 e2       	ldi	r22, 0x26	; 38
     f0c:	ce 01       	movw	r24, r28
     f0e:	0e 94 ac 06 	call	0xd58	; 0xd58 <_ZN12ShieldParentC1Eh>
     f12:	87 e8       	ldi	r24, 0x87	; 135
     f14:	91 e0       	ldi	r25, 0x01	; 1
     f16:	99 83       	std	Y+1, r25	; 0x01
     f18:	88 83       	st	Y, r24

template <typename T, uint16_t Size>
class CircularBuffer {
public:
  CircularBuffer() :
    wp_(buf_), rp_(buf_), tail_(buf_+Size),  remain_(0) {}
     f1a:	ce 01       	movw	r24, r28
     f1c:	09 96       	adiw	r24, 0x09	; 9
     f1e:	fe 01       	movw	r30, r28
     f20:	e7 5b       	subi	r30, 0xB7	; 183
     f22:	ff 4f       	sbci	r31, 0xFF	; 255
     f24:	91 83       	std	Z+1, r25	; 0x01
     f26:	80 83       	st	Z, r24
     f28:	de 01       	movw	r26, r28
     f2a:	a5 5b       	subi	r26, 0xB5	; 181
     f2c:	bf 4f       	sbci	r27, 0xFF	; 255
     f2e:	11 96       	adiw	r26, 0x01	; 1
     f30:	9c 93       	st	X, r25
     f32:	8e 93       	st	-X, r24
     f34:	12 96       	adiw	r26, 0x02	; 2
     f36:	ed 93       	st	X+, r30
     f38:	fc 93       	st	X, r31
     f3a:	c1 5b       	subi	r28, 0xB1	; 177
     f3c:	df 4f       	sbci	r29, 0xFF	; 255
     f3e:	19 82       	std	Y+1, r1	; 0x01
     f40:	18 82       	st	Y, r1
{}
     f42:	df 91       	pop	r29
     f44:	cf 91       	pop	r28
     f46:	08 95       	ret

00000f48 <_ZN11HttpRequest13sendInitFrameEPKc>:
		free (url);
	}
}

void HttpRequest::sendInitFrame(const char * _url)
{
     f48:	cf 92       	push	r12
     f4a:	df 92       	push	r13
     f4c:	ef 92       	push	r14
     f4e:	ff 92       	push	r15
     f50:	0f 93       	push	r16
     f52:	1f 93       	push	r17
     f54:	cf 93       	push	r28
     f56:	df 93       	push	r29
	//Check length of string 
	int _urlLength = strlen(_url);
     f58:	fb 01       	movw	r30, r22
     f5a:	01 90       	ld	r0, Z+
     f5c:	00 20       	and	r0, r0
     f5e:	e9 f7       	brne	.-6      	; 0xf5a <_ZN11HttpRequest13sendInitFrameEPKc+0x12>
     f60:	31 97       	sbiw	r30, 0x01	; 1
     f62:	ef 01       	movw	r28, r30
     f64:	c6 1b       	sub	r28, r22
     f66:	d7 0b       	sbc	r29, r23
	if(!_urlLength) return;
     f68:	d9 f1       	breq	.+118    	; 0xfe0 <_ZN11HttpRequest13sendInitFrameEPKc+0x98>
     f6a:	7b 01       	movw	r14, r22
     f6c:	6c 01       	movw	r12, r24
	OneSheeld.sendShieldFrame(INTERNET_ID,0,HTTP_REQUEST_URL,2,new FunctionArg(2,(byte*)localRequestId),
														  new FunctionArg(_urlLength,(byte*)_url));
     f6e:	84 e0       	ldi	r24, 0x04	; 4
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <_Znwj>
     f76:	8c 01       	movw	r16, r24
	byte * data;
	bool saveData;
public:
	FunctionArg(int l ,byte * d, bool _saveData=false)
	{
		saveData=_saveData;
     f78:	fc 01       	movw	r30, r24
     f7a:	13 82       	std	Z+3, r1	; 0x03
		length=(l>0xff)?0xff:l;
     f7c:	9e 01       	movw	r18, r28
     f7e:	cf 3f       	cpi	r28, 0xFF	; 255
     f80:	d1 05       	cpc	r29, r1
     f82:	19 f0       	breq	.+6      	; 0xf8a <_ZN11HttpRequest13sendInitFrameEPKc+0x42>
     f84:	14 f0       	brlt	.+4      	; 0xf8a <_ZN11HttpRequest13sendInitFrameEPKc+0x42>
     f86:	2f ef       	ldi	r18, 0xFF	; 255
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	f8 01       	movw	r30, r16
     f8c:	20 83       	st	Z, r18
			data=(byte *)malloc(sizeof(byte)*length);
			memcpy(data,d,length);
		}
		else
		{
			data=d;
     f8e:	f2 82       	std	Z+2, r15	; 0x02
     f90:	e1 82       	std	Z+1, r14	; 0x01
     f92:	84 e0       	ldi	r24, 0x04	; 4
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <_Znwj>
     f9a:	fc 01       	movw	r30, r24
	byte * data;
	bool saveData;
public:
	FunctionArg(int l ,byte * d, bool _saveData=false)
	{
		saveData=_saveData;
     f9c:	13 82       	std	Z+3, r1	; 0x03
		length=(l>0xff)?0xff:l;
     f9e:	82 e0       	ldi	r24, 0x02	; 2
     fa0:	80 83       	st	Z, r24
void HttpRequest::sendInitFrame(const char * _url)
{
	//Check length of string 
	int _urlLength = strlen(_url);
	if(!_urlLength) return;
	OneSheeld.sendShieldFrame(INTERNET_ID,0,HTTP_REQUEST_URL,2,new FunctionArg(2,(byte*)localRequestId),
     fa2:	96 01       	movw	r18, r12
     fa4:	2d 5f       	subi	r18, 0xFD	; 253
     fa6:	3f 4f       	sbci	r19, 0xFF	; 255
			data=(byte *)malloc(sizeof(byte)*length);
			memcpy(data,d,length);
		}
		else
		{
			data=d;
     fa8:	32 83       	std	Z+2, r19	; 0x02
     faa:	21 83       	std	Z+1, r18	; 0x01
														  new FunctionArg(_urlLength,(byte*)_url));
     fac:	1f 93       	push	r17
     fae:	0f 93       	push	r16
     fb0:	ff 93       	push	r31
     fb2:	ef 93       	push	r30
     fb4:	8f 93       	push	r24
     fb6:	c1 e0       	ldi	r28, 0x01	; 1
     fb8:	cf 93       	push	r28
     fba:	1f 92       	push	r1
     fbc:	89 e2       	ldi	r24, 0x29	; 41
     fbe:	8f 93       	push	r24
     fc0:	84 e0       	ldi	r24, 0x04	; 4
     fc2:	92 e0       	ldi	r25, 0x02	; 2
     fc4:	9f 93       	push	r25
     fc6:	8f 93       	push	r24
     fc8:	0e 94 3e 02 	call	0x47c	; 0x47c <_ZN14OneSheeldClass15sendShieldFrameEhhhhz>
	isInitFrameSent=true;
     fcc:	f6 01       	movw	r30, r12
     fce:	c0 83       	st	Z, r28
     fd0:	8d b7       	in	r24, 0x3d	; 61
     fd2:	9e b7       	in	r25, 0x3e	; 62
     fd4:	0a 96       	adiw	r24, 0x0a	; 10
     fd6:	0f b6       	in	r0, 0x3f	; 63
     fd8:	f8 94       	cli
     fda:	9e bf       	out	0x3e, r25	; 62
     fdc:	0f be       	out	0x3f, r0	; 63
     fde:	8d bf       	out	0x3d, r24	; 61
}
     fe0:	df 91       	pop	r29
     fe2:	cf 91       	pop	r28
     fe4:	1f 91       	pop	r17
     fe6:	0f 91       	pop	r16
     fe8:	ff 90       	pop	r15
     fea:	ef 90       	pop	r14
     fec:	df 90       	pop	r13
     fee:	cf 90       	pop	r12
     ff0:	08 95       	ret

00000ff2 <_ZN11HttpRequest13sendInitFrameEv>:
		sendInitFrame(_url);
	}
}
// #endif
void HttpRequest::sendInitFrame()
{
     ff2:	cf 93       	push	r28
     ff4:	df 93       	push	r29
	if(!isInitFrameSent)
     ff6:	fc 01       	movw	r30, r24
     ff8:	20 81       	ld	r18, Z
     ffa:	21 11       	cpse	r18, r1
     ffc:	0b c0       	rjmp	.+22     	; 0x1014 <_ZN11HttpRequest13sendInitFrameEv+0x22>
     ffe:	ec 01       	movw	r28, r24
	{
		sendInitFrame(url);
    1000:	61 81       	ldd	r22, Z+1	; 0x01
    1002:	72 81       	ldd	r23, Z+2	; 0x02
    1004:	0e 94 a4 07 	call	0xf48	; 0xf48 <_ZN11HttpRequest13sendInitFrameEPKc>
		free (url);
    1008:	89 81       	ldd	r24, Y+1	; 0x01
    100a:	9a 81       	ldd	r25, Y+2	; 0x02
	}
}
    100c:	df 91       	pop	r29
    100e:	cf 91       	pop	r28
void HttpRequest::sendInitFrame()
{
	if(!isInitFrameSent)
	{
		sendInitFrame(url);
		free (url);
    1010:	0c 94 a1 0b 	jmp	0x1742	; 0x1742 <free>
	}
}
    1014:	df 91       	pop	r29
    1016:	cf 91       	pop	r28
    1018:	08 95       	ret

0000101a <_ZN10PrintClassC1Ehhh>:
{
	char stringPointer[11];
	snprintf(stringPointer,11,"%lu",data);
	
	OneSheeld.sendShieldFrame(shieldId,0,print_fn_id,1,new FunctionArg(strlen(stringPointer),(byte *)stringPointer));	
}
    101a:	fc 01       	movw	r30, r24
    101c:	62 83       	std	Z+2, r22	; 0x02
    101e:	20 83       	st	Z, r18
    1020:	41 83       	std	Z+1, r20	; 0x01
    1022:	08 95       	ret

00001024 <_ZN10PrintClass5printEPKc>:
//Print string
void PrintClass::print(const char * stringData)
{
    1024:	ef 92       	push	r14
    1026:	ff 92       	push	r15
    1028:	0f 93       	push	r16
    102a:	1f 93       	push	r17
    102c:	cf 93       	push	r28
    102e:	df 93       	push	r29
	//Check length of string 
	int stringDataLength = strlen(stringData);
    1030:	fb 01       	movw	r30, r22
    1032:	01 90       	ld	r0, Z+
    1034:	00 20       	and	r0, r0
    1036:	e9 f7       	brne	.-6      	; 0x1032 <_ZN10PrintClass5printEPKc+0xe>
    1038:	31 97       	sbiw	r30, 0x01	; 1
    103a:	ef 01       	movw	r28, r30
    103c:	c6 1b       	sub	r28, r22
    103e:	d7 0b       	sbc	r29, r23
	if(!stringDataLength) return;
    1040:	51 f1       	breq	.+84     	; 0x1096 <_ZN10PrintClass5printEPKc+0x72>
    1042:	8b 01       	movw	r16, r22
    1044:	7c 01       	movw	r14, r24
	OneSheeld.sendShieldFrame(shieldId,0,print_fn_id,1,new FunctionArg(stringDataLength,(byte*)stringData));	
    1046:	84 e0       	ldi	r24, 0x04	; 4
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <_Znwj>
    104e:	fc 01       	movw	r30, r24
	byte * data;
	bool saveData;
public:
	FunctionArg(int l ,byte * d, bool _saveData=false)
	{
		saveData=_saveData;
    1050:	13 82       	std	Z+3, r1	; 0x03
		length=(l>0xff)?0xff:l;
    1052:	9e 01       	movw	r18, r28
    1054:	cf 3f       	cpi	r28, 0xFF	; 255
    1056:	d1 05       	cpc	r29, r1
    1058:	19 f0       	breq	.+6      	; 0x1060 <_ZN10PrintClass5printEPKc+0x3c>
    105a:	14 f0       	brlt	.+4      	; 0x1060 <_ZN10PrintClass5printEPKc+0x3c>
    105c:	2f ef       	ldi	r18, 0xFF	; 255
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	20 83       	st	Z, r18
			data=(byte *)malloc(sizeof(byte)*length);
			memcpy(data,d,length);
		}
		else
		{
			data=d;
    1062:	12 83       	std	Z+2, r17	; 0x02
    1064:	01 83       	std	Z+1, r16	; 0x01
    1066:	ff 93       	push	r31
    1068:	ef 93       	push	r30
    106a:	81 e0       	ldi	r24, 0x01	; 1
    106c:	8f 93       	push	r24
    106e:	f7 01       	movw	r30, r14
    1070:	80 81       	ld	r24, Z
    1072:	8f 93       	push	r24
    1074:	1f 92       	push	r1
    1076:	82 81       	ldd	r24, Z+2	; 0x02
    1078:	8f 93       	push	r24
    107a:	84 e0       	ldi	r24, 0x04	; 4
    107c:	92 e0       	ldi	r25, 0x02	; 2
    107e:	9f 93       	push	r25
    1080:	8f 93       	push	r24
    1082:	0e 94 3e 02 	call	0x47c	; 0x47c <_ZN14OneSheeldClass15sendShieldFrameEhhhhz>
    1086:	8d b7       	in	r24, 0x3d	; 61
    1088:	9e b7       	in	r25, 0x3e	; 62
    108a:	08 96       	adiw	r24, 0x08	; 8
    108c:	0f b6       	in	r0, 0x3f	; 63
    108e:	f8 94       	cli
    1090:	9e bf       	out	0x3e, r25	; 62
    1092:	0f be       	out	0x3f, r0	; 63
    1094:	8d bf       	out	0x3d, r24	; 61
}
    1096:	df 91       	pop	r29
    1098:	cf 91       	pop	r28
    109a:	1f 91       	pop	r17
    109c:	0f 91       	pop	r16
    109e:	ff 90       	pop	r15
    10a0:	ef 90       	pop	r14
    10a2:	08 95       	ret

000010a4 <_ZN14HardwareSerial9availableEv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    10a4:	fc 01       	movw	r30, r24
    10a6:	91 8d       	ldd	r25, Z+25	; 0x19
    10a8:	22 8d       	ldd	r18, Z+26	; 0x1a
    10aa:	89 2f       	mov	r24, r25
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	80 5c       	subi	r24, 0xC0	; 192
    10b0:	9f 4f       	sbci	r25, 0xFF	; 255
    10b2:	82 1b       	sub	r24, r18
    10b4:	91 09       	sbc	r25, r1
    10b6:	8f 73       	andi	r24, 0x3F	; 63
    10b8:	99 27       	eor	r25, r25
    10ba:	08 95       	ret

000010bc <_ZN14HardwareSerial4peekEv>:
    10bc:	fc 01       	movw	r30, r24
    10be:	91 8d       	ldd	r25, Z+25	; 0x19
    10c0:	82 8d       	ldd	r24, Z+26	; 0x1a
    10c2:	98 17       	cp	r25, r24
    10c4:	31 f0       	breq	.+12     	; 0x10d2 <_ZN14HardwareSerial4peekEv+0x16>
    10c6:	82 8d       	ldd	r24, Z+26	; 0x1a
    10c8:	e8 0f       	add	r30, r24
    10ca:	f1 1d       	adc	r31, r1
    10cc:	85 8d       	ldd	r24, Z+29	; 0x1d
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	08 95       	ret
    10d2:	8f ef       	ldi	r24, 0xFF	; 255
    10d4:	9f ef       	ldi	r25, 0xFF	; 255
    10d6:	08 95       	ret

000010d8 <_ZN14HardwareSerial4readEv>:
    10d8:	fc 01       	movw	r30, r24
    10da:	91 8d       	ldd	r25, Z+25	; 0x19
    10dc:	82 8d       	ldd	r24, Z+26	; 0x1a
    10de:	98 17       	cp	r25, r24
    10e0:	61 f0       	breq	.+24     	; 0x10fa <_ZN14HardwareSerial4readEv+0x22>
    10e2:	82 8d       	ldd	r24, Z+26	; 0x1a
    10e4:	df 01       	movw	r26, r30
    10e6:	a8 0f       	add	r26, r24
    10e8:	b1 1d       	adc	r27, r1
    10ea:	5d 96       	adiw	r26, 0x1d	; 29
    10ec:	8c 91       	ld	r24, X
    10ee:	92 8d       	ldd	r25, Z+26	; 0x1a
    10f0:	9f 5f       	subi	r25, 0xFF	; 255
    10f2:	9f 73       	andi	r25, 0x3F	; 63
    10f4:	92 8f       	std	Z+26, r25	; 0x1a
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	08 95       	ret
    10fa:	8f ef       	ldi	r24, 0xFF	; 255
    10fc:	9f ef       	ldi	r25, 0xFF	; 255
    10fe:	08 95       	ret

00001100 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    1100:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    1102:	84 8d       	ldd	r24, Z+28	; 0x1c
    1104:	df 01       	movw	r26, r30
    1106:	a8 0f       	add	r26, r24
    1108:	b1 1d       	adc	r27, r1
    110a:	a3 5a       	subi	r26, 0xA3	; 163
    110c:	bf 4f       	sbci	r27, 0xFF	; 255
    110e:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    1110:	84 8d       	ldd	r24, Z+28	; 0x1c
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	01 96       	adiw	r24, 0x01	; 1
    1116:	8f 77       	andi	r24, 0x7F	; 127
    1118:	99 27       	eor	r25, r25
    111a:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    111c:	a6 89       	ldd	r26, Z+22	; 0x16
    111e:	b7 89       	ldd	r27, Z+23	; 0x17
    1120:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    1122:	a0 89       	ldd	r26, Z+16	; 0x10
    1124:	b1 89       	ldd	r27, Z+17	; 0x11
    1126:	8c 91       	ld	r24, X
    1128:	80 64       	ori	r24, 0x40	; 64
    112a:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    112c:	93 8d       	ldd	r25, Z+27	; 0x1b
    112e:	84 8d       	ldd	r24, Z+28	; 0x1c
    1130:	98 13       	cpse	r25, r24
    1132:	08 95       	ret
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    1134:	02 88       	ldd	r0, Z+18	; 0x12
    1136:	f3 89       	ldd	r31, Z+19	; 0x13
    1138:	e0 2d       	mov	r30, r0
    113a:	80 81       	ld	r24, Z
    113c:	8f 7d       	andi	r24, 0xDF	; 223
    113e:	80 83       	st	Z, r24
    1140:	08 95       	ret

00001142 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    1142:	cf 93       	push	r28
    1144:	df 93       	push	r29
    1146:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    1148:	88 8d       	ldd	r24, Y+24	; 0x18
    114a:	88 23       	and	r24, r24
    114c:	b9 f0       	breq	.+46     	; 0x117c <_ZN14HardwareSerial5flushEv+0x3a>
    114e:	ea 89       	ldd	r30, Y+18	; 0x12
    1150:	fb 89       	ldd	r31, Y+19	; 0x13
    1152:	a8 89       	ldd	r26, Y+16	; 0x10
    1154:	b9 89       	ldd	r27, Y+17	; 0x11
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1156:	90 81       	ld	r25, Z
    1158:	95 ff       	sbrs	r25, 5
    115a:	0d c0       	rjmp	.+26     	; 0x1176 <_ZN14HardwareSerial5flushEv+0x34>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    115c:	0f b6       	in	r0, 0x3f	; 63
    115e:	07 fc       	sbrc	r0, 7
    1160:	fa cf       	rjmp	.-12     	; 0x1156 <_ZN14HardwareSerial5flushEv+0x14>
    1162:	90 81       	ld	r25, Z
    1164:	95 ff       	sbrs	r25, 5
    1166:	f7 cf       	rjmp	.-18     	; 0x1156 <_ZN14HardwareSerial5flushEv+0x14>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    1168:	8c 91       	ld	r24, X
    116a:	85 ff       	sbrs	r24, 5
    116c:	f4 cf       	rjmp	.-24     	; 0x1156 <_ZN14HardwareSerial5flushEv+0x14>
	  _tx_udr_empty_irq();
    116e:	ce 01       	movw	r24, r28
    1170:	0e 94 80 08 	call	0x1100	; 0x1100 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1174:	ec cf       	rjmp	.-40     	; 0x114e <_ZN14HardwareSerial5flushEv+0xc>
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1176:	8c 91       	ld	r24, X
    1178:	86 ff       	sbrs	r24, 6
    117a:	f0 cf       	rjmp	.-32     	; 0x115c <_ZN14HardwareSerial5flushEv+0x1a>
	if (bit_is_set(*_ucsra, UDRE0))
	  _tx_udr_empty_irq();
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    117c:	df 91       	pop	r29
    117e:	cf 91       	pop	r28
    1180:	08 95       	ret

00001182 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    1182:	ef 92       	push	r14
    1184:	ff 92       	push	r15
    1186:	0f 93       	push	r16
    1188:	1f 93       	push	r17
    118a:	cf 93       	push	r28
    118c:	df 93       	push	r29
    118e:	ec 01       	movw	r28, r24
  _written = true;
    1190:	81 e0       	ldi	r24, 0x01	; 1
    1192:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    1194:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1196:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1198:	98 17       	cp	r25, r24
    119a:	81 f1       	breq	.+96     	; 0x11fc <_ZN14HardwareSerial5writeEh+0x7a>
    119c:	06 2f       	mov	r16, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    119e:	eb 8c       	ldd	r14, Y+27	; 0x1b
    11a0:	f1 2c       	mov	r15, r1
    11a2:	8f ef       	ldi	r24, 0xFF	; 255
    11a4:	e8 1a       	sub	r14, r24
    11a6:	f8 0a       	sbc	r15, r24
    11a8:	e8 94       	clt
    11aa:	e7 f8       	bld	r14, 7
    11ac:	ff 24       	eor	r15, r15
    11ae:	1e 2d       	mov	r17, r14
    11b0:	03 c0       	rjmp	.+6      	; 0x11b8 <_ZN14HardwareSerial5writeEh+0x36>
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    if (bit_is_clear(SREG, SREG_I)) {
    11b2:	0f b6       	in	r0, 0x3f	; 63
    11b4:	07 fe       	sbrs	r0, 7
    11b6:	19 c0       	rjmp	.+50     	; 0x11ea <_ZN14HardwareSerial5writeEh+0x68>
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    11b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11ba:	19 17       	cp	r17, r25
    11bc:	d1 f3       	breq	.-12     	; 0x11b2 <_ZN14HardwareSerial5writeEh+0x30>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    11be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11c0:	fe 01       	movw	r30, r28
    11c2:	e8 0f       	add	r30, r24
    11c4:	f1 1d       	adc	r31, r1
    11c6:	e3 5a       	subi	r30, 0xA3	; 163
    11c8:	ff 4f       	sbci	r31, 0xFF	; 255
    11ca:	00 83       	st	Z, r16
  _tx_buffer_head = i;
    11cc:	eb 8e       	std	Y+27, r14	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    11ce:	ea 89       	ldd	r30, Y+18	; 0x12
    11d0:	fb 89       	ldd	r31, Y+19	; 0x13
    11d2:	80 81       	ld	r24, Z
    11d4:	80 62       	ori	r24, 0x20	; 32
    11d6:	80 83       	st	Z, r24
  
  return 1;
}
    11d8:	81 e0       	ldi	r24, 0x01	; 1
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	df 91       	pop	r29
    11de:	cf 91       	pop	r28
    11e0:	1f 91       	pop	r17
    11e2:	0f 91       	pop	r16
    11e4:	ff 90       	pop	r15
    11e6:	ef 90       	pop	r14
    11e8:	08 95       	ret
    if (bit_is_clear(SREG, SREG_I)) {
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    11ea:	e8 89       	ldd	r30, Y+16	; 0x10
    11ec:	f9 89       	ldd	r31, Y+17	; 0x11
    11ee:	80 81       	ld	r24, Z
    11f0:	85 ff       	sbrs	r24, 5
    11f2:	e2 cf       	rjmp	.-60     	; 0x11b8 <_ZN14HardwareSerial5writeEh+0x36>
	_tx_udr_empty_irq();
    11f4:	ce 01       	movw	r24, r28
    11f6:	0e 94 80 08 	call	0x1100	; 0x1100 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    11fa:	de cf       	rjmp	.-68     	; 0x11b8 <_ZN14HardwareSerial5writeEh+0x36>
  _written = true;
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    11fc:	e8 89       	ldd	r30, Y+16	; 0x10
    11fe:	f9 89       	ldd	r31, Y+17	; 0x11
    1200:	80 81       	ld	r24, Z
    1202:	85 ff       	sbrs	r24, 5
    1204:	cb cf       	rjmp	.-106    	; 0x119c <_ZN14HardwareSerial5writeEh+0x1a>
    *_udr = c;
    1206:	ee 89       	ldd	r30, Y+22	; 0x16
    1208:	ff 89       	ldd	r31, Y+23	; 0x17
    120a:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    120c:	e8 89       	ldd	r30, Y+16	; 0x10
    120e:	f9 89       	ldd	r31, Y+17	; 0x11
    1210:	80 81       	ld	r24, Z
    1212:	80 64       	ori	r24, 0x40	; 64
    1214:	80 83       	st	Z, r24
    return 1;
    1216:	e0 cf       	rjmp	.-64     	; 0x11d8 <_ZN14HardwareSerial5writeEh+0x56>

00001218 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    1218:	bf 92       	push	r11
    121a:	cf 92       	push	r12
    121c:	df 92       	push	r13
    121e:	ef 92       	push	r14
    1220:	ff 92       	push	r15
    1222:	0f 93       	push	r16
    1224:	1f 93       	push	r17
    1226:	cf 93       	push	r28
    1228:	df 93       	push	r29
    122a:	ec 01       	movw	r28, r24
    122c:	6a 01       	movw	r12, r20
    122e:	7b 01       	movw	r14, r22
    1230:	b2 2e       	mov	r11, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    1232:	e8 89       	ldd	r30, Y+16	; 0x10
    1234:	f9 89       	ldd	r31, Y+17	; 0x11
    1236:	82 e0       	ldi	r24, 0x02	; 2
    1238:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    123a:	41 15       	cp	r20, r1
    123c:	51 4e       	sbci	r21, 0xE1	; 225
    123e:	61 05       	cpc	r22, r1
    1240:	71 05       	cpc	r23, r1
    1242:	b1 f0       	breq	.+44     	; 0x1270 <_ZN14HardwareSerial5beginEmh+0x58>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1244:	60 e0       	ldi	r22, 0x00	; 0
    1246:	79 e0       	ldi	r23, 0x09	; 9
    1248:	8d e3       	ldi	r24, 0x3D	; 61
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	a7 01       	movw	r20, r14
    124e:	96 01       	movw	r18, r12
    1250:	0e 94 ab 0a 	call	0x1556	; 0x1556 <__udivmodsi4>
    1254:	89 01       	movw	r16, r18
    1256:	9a 01       	movw	r18, r20
    1258:	01 50       	subi	r16, 0x01	; 1
    125a:	11 09       	sbc	r17, r1
    125c:	21 09       	sbc	r18, r1
    125e:	31 09       	sbc	r19, r1
    1260:	36 95       	lsr	r19
    1262:	27 95       	ror	r18
    1264:	17 95       	ror	r17
    1266:	07 95       	ror	r16
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1268:	01 15       	cp	r16, r1
    126a:	80 e1       	ldi	r24, 0x10	; 16
    126c:	18 07       	cpc	r17, r24
    126e:	a8 f0       	brcs	.+42     	; 0x129a <_ZN14HardwareSerial5beginEmh+0x82>
  {
    *_ucsra = 0;
    1270:	e8 89       	ldd	r30, Y+16	; 0x10
    1272:	f9 89       	ldd	r31, Y+17	; 0x11
    1274:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1276:	60 e8       	ldi	r22, 0x80	; 128
    1278:	74 e8       	ldi	r23, 0x84	; 132
    127a:	8e e1       	ldi	r24, 0x1E	; 30
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	a7 01       	movw	r20, r14
    1280:	96 01       	movw	r18, r12
    1282:	0e 94 ab 0a 	call	0x1556	; 0x1556 <__udivmodsi4>
    1286:	da 01       	movw	r26, r20
    1288:	c9 01       	movw	r24, r18
    128a:	01 97       	sbiw	r24, 0x01	; 1
    128c:	a1 09       	sbc	r26, r1
    128e:	b1 09       	sbc	r27, r1
    1290:	b6 95       	lsr	r27
    1292:	a7 95       	ror	r26
    1294:	97 95       	ror	r25
    1296:	87 95       	ror	r24
    1298:	8c 01       	movw	r16, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    129a:	ec 85       	ldd	r30, Y+12	; 0x0c
    129c:	fd 85       	ldd	r31, Y+13	; 0x0d
    129e:	10 83       	st	Z, r17
  *_ubrrl = baud_setting;
    12a0:	ee 85       	ldd	r30, Y+14	; 0x0e
    12a2:	ff 85       	ldd	r31, Y+15	; 0x0f
    12a4:	00 83       	st	Z, r16

  _written = false;
    12a6:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    12a8:	ec 89       	ldd	r30, Y+20	; 0x14
    12aa:	fd 89       	ldd	r31, Y+21	; 0x15
    12ac:	b0 82       	st	Z, r11
  
  sbi(*_ucsrb, RXEN0);
    12ae:	ea 89       	ldd	r30, Y+18	; 0x12
    12b0:	fb 89       	ldd	r31, Y+19	; 0x13
    12b2:	80 81       	ld	r24, Z
    12b4:	80 61       	ori	r24, 0x10	; 16
    12b6:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    12b8:	ea 89       	ldd	r30, Y+18	; 0x12
    12ba:	fb 89       	ldd	r31, Y+19	; 0x13
    12bc:	80 81       	ld	r24, Z
    12be:	88 60       	ori	r24, 0x08	; 8
    12c0:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    12c2:	ea 89       	ldd	r30, Y+18	; 0x12
    12c4:	fb 89       	ldd	r31, Y+19	; 0x13
    12c6:	80 81       	ld	r24, Z
    12c8:	80 68       	ori	r24, 0x80	; 128
    12ca:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    12cc:	ea 89       	ldd	r30, Y+18	; 0x12
    12ce:	fb 89       	ldd	r31, Y+19	; 0x13
    12d0:	80 81       	ld	r24, Z
    12d2:	8f 7d       	andi	r24, 0xDF	; 223
    12d4:	80 83       	st	Z, r24
}
    12d6:	df 91       	pop	r29
    12d8:	cf 91       	pop	r28
    12da:	1f 91       	pop	r17
    12dc:	0f 91       	pop	r16
    12de:	ff 90       	pop	r15
    12e0:	ef 90       	pop	r14
    12e2:	df 90       	pop	r13
    12e4:	cf 90       	pop	r12
    12e6:	bf 90       	pop	r11
    12e8:	08 95       	ret

000012ea <__vector_18>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
}
    12ea:	1f 92       	push	r1
    12ec:	0f 92       	push	r0
    12ee:	0f b6       	in	r0, 0x3f	; 63
    12f0:	0f 92       	push	r0
    12f2:	11 24       	eor	r1, r1
    12f4:	2f 93       	push	r18
    12f6:	8f 93       	push	r24
    12f8:	9f 93       	push	r25
    12fa:	ef 93       	push	r30
    12fc:	ff 93       	push	r31
    12fe:	e0 91 99 02 	lds	r30, 0x0299
    1302:	f0 91 9a 02 	lds	r31, 0x029A
    1306:	80 81       	ld	r24, Z
    1308:	e0 91 9f 02 	lds	r30, 0x029F
    130c:	f0 91 a0 02 	lds	r31, 0x02A0
    1310:	82 fd       	sbrc	r24, 2
    1312:	1b c0       	rjmp	.+54     	; 0x134a <__vector_18+0x60>
    1314:	20 81       	ld	r18, Z
    1316:	80 91 a2 02 	lds	r24, 0x02A2
    131a:	8f 5f       	subi	r24, 0xFF	; 255
    131c:	8f 73       	andi	r24, 0x3F	; 63
    131e:	90 91 a3 02 	lds	r25, 0x02A3
    1322:	89 17       	cp	r24, r25
    1324:	41 f0       	breq	.+16     	; 0x1336 <__vector_18+0x4c>
    1326:	e0 91 a2 02 	lds	r30, 0x02A2
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	e7 57       	subi	r30, 0x77	; 119
    132e:	fd 4f       	sbci	r31, 0xFD	; 253
    1330:	25 8f       	std	Z+29, r18	; 0x1d
    1332:	80 93 a2 02 	sts	0x02A2, r24
    1336:	ff 91       	pop	r31
    1338:	ef 91       	pop	r30
    133a:	9f 91       	pop	r25
    133c:	8f 91       	pop	r24
    133e:	2f 91       	pop	r18
    1340:	0f 90       	pop	r0
    1342:	0f be       	out	0x3f, r0	; 63
    1344:	0f 90       	pop	r0
    1346:	1f 90       	pop	r1
    1348:	18 95       	reti
    134a:	80 81       	ld	r24, Z
    134c:	f4 cf       	rjmp	.-24     	; 0x1336 <__vector_18+0x4c>

0000134e <__vector_19>:
    134e:	1f 92       	push	r1
    1350:	0f 92       	push	r0
    1352:	0f b6       	in	r0, 0x3f	; 63
    1354:	0f 92       	push	r0
    1356:	11 24       	eor	r1, r1
    1358:	2f 93       	push	r18
    135a:	3f 93       	push	r19
    135c:	4f 93       	push	r20
    135e:	5f 93       	push	r21
    1360:	6f 93       	push	r22
    1362:	7f 93       	push	r23
    1364:	8f 93       	push	r24
    1366:	9f 93       	push	r25
    1368:	af 93       	push	r26
    136a:	bf 93       	push	r27
    136c:	ef 93       	push	r30
    136e:	ff 93       	push	r31
    1370:	89 e8       	ldi	r24, 0x89	; 137
    1372:	92 e0       	ldi	r25, 0x02	; 2
    1374:	0e 94 80 08 	call	0x1100	; 0x1100 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1378:	ff 91       	pop	r31
    137a:	ef 91       	pop	r30
    137c:	bf 91       	pop	r27
    137e:	af 91       	pop	r26
    1380:	9f 91       	pop	r25
    1382:	8f 91       	pop	r24
    1384:	7f 91       	pop	r23
    1386:	6f 91       	pop	r22
    1388:	5f 91       	pop	r21
    138a:	4f 91       	pop	r20
    138c:	3f 91       	pop	r19
    138e:	2f 91       	pop	r18
    1390:	0f 90       	pop	r0
    1392:	0f be       	out	0x3f, r0	; 63
    1394:	0f 90       	pop	r0
    1396:	1f 90       	pop	r1
    1398:	18 95       	reti

0000139a <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    139a:	e9 e8       	ldi	r30, 0x89	; 137
    139c:	f2 e0       	ldi	r31, 0x02	; 2
    139e:	13 82       	std	Z+3, r1	; 0x03
    13a0:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    13a2:	88 ee       	ldi	r24, 0xE8	; 232
    13a4:	93 e0       	ldi	r25, 0x03	; 3
    13a6:	a0 e0       	ldi	r26, 0x00	; 0
    13a8:	b0 e0       	ldi	r27, 0x00	; 0
    13aa:	84 83       	std	Z+4, r24	; 0x04
    13ac:	95 83       	std	Z+5, r25	; 0x05
    13ae:	a6 83       	std	Z+6, r26	; 0x06
    13b0:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    13b2:	8f e8       	ldi	r24, 0x8F	; 143
    13b4:	91 e0       	ldi	r25, 0x01	; 1
    13b6:	91 83       	std	Z+1, r25	; 0x01
    13b8:	80 83       	st	Z, r24
    13ba:	85 ec       	ldi	r24, 0xC5	; 197
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	95 87       	std	Z+13, r25	; 0x0d
    13c0:	84 87       	std	Z+12, r24	; 0x0c
    13c2:	84 ec       	ldi	r24, 0xC4	; 196
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	97 87       	std	Z+15, r25	; 0x0f
    13c8:	86 87       	std	Z+14, r24	; 0x0e
    13ca:	80 ec       	ldi	r24, 0xC0	; 192
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	91 8b       	std	Z+17, r25	; 0x11
    13d0:	80 8b       	std	Z+16, r24	; 0x10
    13d2:	81 ec       	ldi	r24, 0xC1	; 193
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	93 8b       	std	Z+19, r25	; 0x13
    13d8:	82 8b       	std	Z+18, r24	; 0x12
    13da:	82 ec       	ldi	r24, 0xC2	; 194
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	95 8b       	std	Z+21, r25	; 0x15
    13e0:	84 8b       	std	Z+20, r24	; 0x14
    13e2:	86 ec       	ldi	r24, 0xC6	; 198
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	97 8b       	std	Z+23, r25	; 0x17
    13e8:	86 8b       	std	Z+22, r24	; 0x16
    13ea:	11 8e       	std	Z+25, r1	; 0x19
    13ec:	12 8e       	std	Z+26, r1	; 0x1a
    13ee:	13 8e       	std	Z+27, r1	; 0x1b
    13f0:	14 8e       	std	Z+28, r1	; 0x1c
    13f2:	08 95       	ret

000013f4 <_Znwj>:
void *operator new(size_t size) {
  return malloc(size);
}

void *operator new[](size_t size) {
  return malloc(size);
    13f4:	0c 94 0c 0b 	jmp	0x1618	; 0x1618 <malloc>

000013f8 <_ZdlPv>:
}

void operator delete(void * ptr) {
  free(ptr);
    13f8:	0c 94 a1 0b 	jmp	0x1742	; 0x1742 <free>

000013fc <_ZN5Print5writeEPKhj>:
size_t Print::println(const String &s)
{
  size_t n = print(s);
  n += println();
  return n;
}
    13fc:	cf 92       	push	r12
    13fe:	df 92       	push	r13
    1400:	ef 92       	push	r14
    1402:	ff 92       	push	r15
    1404:	0f 93       	push	r16
    1406:	1f 93       	push	r17
    1408:	cf 93       	push	r28
    140a:	df 93       	push	r29
    140c:	41 15       	cp	r20, r1
    140e:	51 05       	cpc	r21, r1
    1410:	09 f1       	breq	.+66     	; 0x1454 <_ZN5Print5writeEPKhj+0x58>
    1412:	6a 01       	movw	r12, r20
    1414:	8c 01       	movw	r16, r24
    1416:	7b 01       	movw	r14, r22
    1418:	c0 e0       	ldi	r28, 0x00	; 0
    141a:	d0 e0       	ldi	r29, 0x00	; 0
    141c:	04 c0       	rjmp	.+8      	; 0x1426 <_ZN5Print5writeEPKhj+0x2a>
    141e:	21 96       	adiw	r28, 0x01	; 1
    1420:	cc 16       	cp	r12, r28
    1422:	dd 06       	cpc	r13, r29
    1424:	69 f0       	breq	.+26     	; 0x1440 <_ZN5Print5writeEPKhj+0x44>
    1426:	d7 01       	movw	r26, r14
    1428:	6d 91       	ld	r22, X+
    142a:	7d 01       	movw	r14, r26
    142c:	d8 01       	movw	r26, r16
    142e:	ed 91       	ld	r30, X+
    1430:	fc 91       	ld	r31, X
    1432:	01 90       	ld	r0, Z+
    1434:	f0 81       	ld	r31, Z
    1436:	e0 2d       	mov	r30, r0
    1438:	c8 01       	movw	r24, r16
    143a:	09 95       	icall
    143c:	89 2b       	or	r24, r25
    143e:	79 f7       	brne	.-34     	; 0x141e <_ZN5Print5writeEPKhj+0x22>
    1440:	ce 01       	movw	r24, r28
    1442:	df 91       	pop	r29
    1444:	cf 91       	pop	r28
    1446:	1f 91       	pop	r17
    1448:	0f 91       	pop	r16
    144a:	ff 90       	pop	r15
    144c:	ef 90       	pop	r14
    144e:	df 90       	pop	r13
    1450:	cf 90       	pop	r12
    1452:	08 95       	ret
    1454:	c0 e0       	ldi	r28, 0x00	; 0
    1456:	d0 e0       	ldi	r29, 0x00	; 0
    1458:	f3 cf       	rjmp	.-26     	; 0x1440 <_ZN5Print5writeEPKhj+0x44>

0000145a <_ZN5Print5printEPKc>:
    145a:	61 15       	cp	r22, r1
    145c:	71 05       	cpc	r23, r1
    145e:	79 f0       	breq	.+30     	; 0x147e <_ZN5Print5printEPKc+0x24>
    1460:	fb 01       	movw	r30, r22
    1462:	01 90       	ld	r0, Z+
    1464:	00 20       	and	r0, r0
    1466:	e9 f7       	brne	.-6      	; 0x1462 <_ZN5Print5printEPKc+0x8>
    1468:	31 97       	sbiw	r30, 0x01	; 1
    146a:	af 01       	movw	r20, r30
    146c:	46 1b       	sub	r20, r22
    146e:	57 0b       	sbc	r21, r23
    1470:	dc 01       	movw	r26, r24
    1472:	ed 91       	ld	r30, X+
    1474:	fc 91       	ld	r31, X
    1476:	02 80       	ldd	r0, Z+2	; 0x02
    1478:	f3 81       	ldd	r31, Z+3	; 0x03
    147a:	e0 2d       	mov	r30, r0
    147c:	09 94       	ijmp
    147e:	80 e0       	ldi	r24, 0x00	; 0
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	08 95       	ret

00001484 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
    1484:	0f 93       	push	r16
    1486:	1f 93       	push	r17
    1488:	cf 93       	push	r28
    148a:	df 93       	push	r29
    148c:	ec 01       	movw	r28, r24
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    148e:	61 15       	cp	r22, r1
    1490:	71 05       	cpc	r23, r1
    1492:	09 f1       	breq	.+66     	; 0x14d6 <_ZN5Print7printlnEPKc+0x52>
      return write((const uint8_t *)str, strlen(str));
    1494:	fb 01       	movw	r30, r22
    1496:	01 90       	ld	r0, Z+
    1498:	00 20       	and	r0, r0
    149a:	e9 f7       	brne	.-6      	; 0x1496 <_ZN5Print7printlnEPKc+0x12>
    149c:	31 97       	sbiw	r30, 0x01	; 1
    149e:	af 01       	movw	r20, r30
    14a0:	46 1b       	sub	r20, r22
    14a2:	57 0b       	sbc	r21, r23
    14a4:	e8 81       	ld	r30, Y
    14a6:	f9 81       	ldd	r31, Y+1	; 0x01
    14a8:	02 80       	ldd	r0, Z+2	; 0x02
    14aa:	f3 81       	ldd	r31, Z+3	; 0x03
    14ac:	e0 2d       	mov	r30, r0
    14ae:	09 95       	icall
    14b0:	8c 01       	movw	r16, r24
    14b2:	e8 81       	ld	r30, Y
    14b4:	f9 81       	ldd	r31, Y+1	; 0x01
    14b6:	02 80       	ldd	r0, Z+2	; 0x02
    14b8:	f3 81       	ldd	r31, Z+3	; 0x03
    14ba:	e0 2d       	mov	r30, r0
    14bc:	42 e0       	ldi	r20, 0x02	; 2
    14be:	50 e0       	ldi	r21, 0x00	; 0
    14c0:	60 e7       	ldi	r22, 0x70	; 112
    14c2:	71 e0       	ldi	r23, 0x01	; 1
    14c4:	ce 01       	movw	r24, r28
    14c6:	09 95       	icall
  size_t n = print(c);
  n += println();
  return n;
}
    14c8:	80 0f       	add	r24, r16
    14ca:	91 1f       	adc	r25, r17
    14cc:	df 91       	pop	r29
    14ce:	cf 91       	pop	r28
    14d0:	1f 91       	pop	r17
    14d2:	0f 91       	pop	r16
    14d4:	08 95       	ret
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    14d6:	00 e0       	ldi	r16, 0x00	; 0
    14d8:	10 e0       	ldi	r17, 0x00	; 0
    14da:	eb cf       	rjmp	.-42     	; 0x14b2 <_ZN5Print7printlnEPKc+0x2e>

000014dc <_Z6randomll>:
  }
  return random() % howbig;
}

long random(long howsmall, long howbig)
{
    14dc:	cf 92       	push	r12
    14de:	df 92       	push	r13
    14e0:	ef 92       	push	r14
    14e2:	ff 92       	push	r15
    14e4:	0f 93       	push	r16
    14e6:	1f 93       	push	r17
    14e8:	cf 93       	push	r28
    14ea:	df 93       	push	r29
    14ec:	00 d0       	rcall	.+0      	; 0x14ee <_Z6randomll+0x12>
    14ee:	00 d0       	rcall	.+0      	; 0x14f0 <_Z6randomll+0x14>
    14f0:	cd b7       	in	r28, 0x3d	; 61
    14f2:	de b7       	in	r29, 0x3e	; 62
  if (howsmall >= howbig) {
    14f4:	62 17       	cp	r22, r18
    14f6:	73 07       	cpc	r23, r19
    14f8:	84 07       	cpc	r24, r20
    14fa:	95 07       	cpc	r25, r21
    14fc:	94 f4       	brge	.+36     	; 0x1522 <_Z6randomll+0x46>
    14fe:	89 01       	movw	r16, r18
    1500:	9a 01       	movw	r18, r20
    1502:	6b 01       	movw	r12, r22
    1504:	7c 01       	movw	r14, r24
    return howsmall;
  }
  long diff = howbig - howsmall;
    1506:	a9 01       	movw	r20, r18
    1508:	98 01       	movw	r18, r16
    150a:	26 1b       	sub	r18, r22
    150c:	37 0b       	sbc	r19, r23
    150e:	48 0b       	sbc	r20, r24
    1510:	59 0b       	sbc	r21, r25
  }
}

long random(long howbig)
{
  if (howbig == 0) {
    1512:	a1 f4       	brne	.+40     	; 0x153c <_Z6randomll+0x60>
    return 0;
    1514:	60 e0       	ldi	r22, 0x00	; 0
    1516:	70 e0       	ldi	r23, 0x00	; 0
    1518:	cb 01       	movw	r24, r22
{
  if (howsmall >= howbig) {
    return howsmall;
  }
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
    151a:	6c 0d       	add	r22, r12
    151c:	7d 1d       	adc	r23, r13
    151e:	8e 1d       	adc	r24, r14
    1520:	9f 1d       	adc	r25, r15
}
    1522:	0f 90       	pop	r0
    1524:	0f 90       	pop	r0
    1526:	0f 90       	pop	r0
    1528:	0f 90       	pop	r0
    152a:	df 91       	pop	r29
    152c:	cf 91       	pop	r28
    152e:	1f 91       	pop	r17
    1530:	0f 91       	pop	r16
    1532:	ff 90       	pop	r15
    1534:	ef 90       	pop	r14
    1536:	df 90       	pop	r13
    1538:	cf 90       	pop	r12
    153a:	08 95       	ret
long random(long howbig)
{
  if (howbig == 0) {
    return 0;
  }
  return random() % howbig;
    153c:	29 83       	std	Y+1, r18	; 0x01
    153e:	3a 83       	std	Y+2, r19	; 0x02
    1540:	4b 83       	std	Y+3, r20	; 0x03
    1542:	5c 83       	std	Y+4, r21	; 0x04
    1544:	0e 94 87 0c 	call	0x190e	; 0x190e <random>
    1548:	29 81       	ldd	r18, Y+1	; 0x01
    154a:	3a 81       	ldd	r19, Y+2	; 0x02
    154c:	4b 81       	ldd	r20, Y+3	; 0x03
    154e:	5c 81       	ldd	r21, Y+4	; 0x04
    1550:	0e 94 cd 0a 	call	0x159a	; 0x159a <__divmodsi4>
    1554:	e2 cf       	rjmp	.-60     	; 0x151a <_Z6randomll+0x3e>

00001556 <__udivmodsi4>:
    1556:	a1 e2       	ldi	r26, 0x21	; 33
    1558:	1a 2e       	mov	r1, r26
    155a:	aa 1b       	sub	r26, r26
    155c:	bb 1b       	sub	r27, r27
    155e:	fd 01       	movw	r30, r26
    1560:	0d c0       	rjmp	.+26     	; 0x157c <__udivmodsi4_ep>

00001562 <__udivmodsi4_loop>:
    1562:	aa 1f       	adc	r26, r26
    1564:	bb 1f       	adc	r27, r27
    1566:	ee 1f       	adc	r30, r30
    1568:	ff 1f       	adc	r31, r31
    156a:	a2 17       	cp	r26, r18
    156c:	b3 07       	cpc	r27, r19
    156e:	e4 07       	cpc	r30, r20
    1570:	f5 07       	cpc	r31, r21
    1572:	20 f0       	brcs	.+8      	; 0x157c <__udivmodsi4_ep>
    1574:	a2 1b       	sub	r26, r18
    1576:	b3 0b       	sbc	r27, r19
    1578:	e4 0b       	sbc	r30, r20
    157a:	f5 0b       	sbc	r31, r21

0000157c <__udivmodsi4_ep>:
    157c:	66 1f       	adc	r22, r22
    157e:	77 1f       	adc	r23, r23
    1580:	88 1f       	adc	r24, r24
    1582:	99 1f       	adc	r25, r25
    1584:	1a 94       	dec	r1
    1586:	69 f7       	brne	.-38     	; 0x1562 <__udivmodsi4_loop>
    1588:	60 95       	com	r22
    158a:	70 95       	com	r23
    158c:	80 95       	com	r24
    158e:	90 95       	com	r25
    1590:	9b 01       	movw	r18, r22
    1592:	ac 01       	movw	r20, r24
    1594:	bd 01       	movw	r22, r26
    1596:	cf 01       	movw	r24, r30
    1598:	08 95       	ret

0000159a <__divmodsi4>:
    159a:	05 2e       	mov	r0, r21
    159c:	97 fb       	bst	r25, 7
    159e:	1e f4       	brtc	.+6      	; 0x15a6 <__divmodsi4+0xc>
    15a0:	00 94       	com	r0
    15a2:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <__negsi2>
    15a6:	57 fd       	sbrc	r21, 7
    15a8:	07 d0       	rcall	.+14     	; 0x15b8 <__divmodsi4_neg2>
    15aa:	0e 94 ab 0a 	call	0x1556	; 0x1556 <__udivmodsi4>
    15ae:	07 fc       	sbrc	r0, 7
    15b0:	03 d0       	rcall	.+6      	; 0x15b8 <__divmodsi4_neg2>
    15b2:	4e f4       	brtc	.+18     	; 0x15c6 <__divmodsi4_exit>
    15b4:	0c 94 e4 0a 	jmp	0x15c8	; 0x15c8 <__negsi2>

000015b8 <__divmodsi4_neg2>:
    15b8:	50 95       	com	r21
    15ba:	40 95       	com	r20
    15bc:	30 95       	com	r19
    15be:	21 95       	neg	r18
    15c0:	3f 4f       	sbci	r19, 0xFF	; 255
    15c2:	4f 4f       	sbci	r20, 0xFF	; 255
    15c4:	5f 4f       	sbci	r21, 0xFF	; 255

000015c6 <__divmodsi4_exit>:
    15c6:	08 95       	ret

000015c8 <__negsi2>:
    15c8:	90 95       	com	r25
    15ca:	80 95       	com	r24
    15cc:	70 95       	com	r23
    15ce:	61 95       	neg	r22
    15d0:	7f 4f       	sbci	r23, 0xFF	; 255
    15d2:	8f 4f       	sbci	r24, 0xFF	; 255
    15d4:	9f 4f       	sbci	r25, 0xFF	; 255
    15d6:	08 95       	ret

000015d8 <__muluhisi3>:
    15d8:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <__umulhisi3>
    15dc:	a5 9f       	mul	r26, r21
    15de:	90 0d       	add	r25, r0
    15e0:	b4 9f       	mul	r27, r20
    15e2:	90 0d       	add	r25, r0
    15e4:	a4 9f       	mul	r26, r20
    15e6:	80 0d       	add	r24, r0
    15e8:	91 1d       	adc	r25, r1
    15ea:	11 24       	eor	r1, r1
    15ec:	08 95       	ret

000015ee <__tablejump2__>:
    15ee:	ee 0f       	add	r30, r30
    15f0:	ff 1f       	adc	r31, r31
    15f2:	05 90       	lpm	r0, Z+
    15f4:	f4 91       	lpm	r31, Z
    15f6:	e0 2d       	mov	r30, r0
    15f8:	09 94       	ijmp

000015fa <__umulhisi3>:
    15fa:	a2 9f       	mul	r26, r18
    15fc:	b0 01       	movw	r22, r0
    15fe:	b3 9f       	mul	r27, r19
    1600:	c0 01       	movw	r24, r0
    1602:	a3 9f       	mul	r26, r19
    1604:	70 0d       	add	r23, r0
    1606:	81 1d       	adc	r24, r1
    1608:	11 24       	eor	r1, r1
    160a:	91 1d       	adc	r25, r1
    160c:	b2 9f       	mul	r27, r18
    160e:	70 0d       	add	r23, r0
    1610:	81 1d       	adc	r24, r1
    1612:	11 24       	eor	r1, r1
    1614:	91 1d       	adc	r25, r1
    1616:	08 95       	ret

00001618 <malloc>:
    1618:	cf 93       	push	r28
    161a:	df 93       	push	r29
    161c:	82 30       	cpi	r24, 0x02	; 2
    161e:	91 05       	cpc	r25, r1
    1620:	10 f4       	brcc	.+4      	; 0x1626 <malloc+0xe>
    1622:	82 e0       	ldi	r24, 0x02	; 2
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	e0 91 68 03 	lds	r30, 0x0368
    162a:	f0 91 69 03 	lds	r31, 0x0369
    162e:	20 e0       	ldi	r18, 0x00	; 0
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	c0 e0       	ldi	r28, 0x00	; 0
    1634:	d0 e0       	ldi	r29, 0x00	; 0
    1636:	30 97       	sbiw	r30, 0x00	; 0
    1638:	11 f1       	breq	.+68     	; 0x167e <malloc+0x66>
    163a:	40 81       	ld	r20, Z
    163c:	51 81       	ldd	r21, Z+1	; 0x01
    163e:	48 17       	cp	r20, r24
    1640:	59 07       	cpc	r21, r25
    1642:	c0 f0       	brcs	.+48     	; 0x1674 <malloc+0x5c>
    1644:	48 17       	cp	r20, r24
    1646:	59 07       	cpc	r21, r25
    1648:	61 f4       	brne	.+24     	; 0x1662 <malloc+0x4a>
    164a:	82 81       	ldd	r24, Z+2	; 0x02
    164c:	93 81       	ldd	r25, Z+3	; 0x03
    164e:	20 97       	sbiw	r28, 0x00	; 0
    1650:	19 f0       	breq	.+6      	; 0x1658 <malloc+0x40>
    1652:	9b 83       	std	Y+3, r25	; 0x03
    1654:	8a 83       	std	Y+2, r24	; 0x02
    1656:	2b c0       	rjmp	.+86     	; 0x16ae <malloc+0x96>
    1658:	90 93 69 03 	sts	0x0369, r25
    165c:	80 93 68 03 	sts	0x0368, r24
    1660:	26 c0       	rjmp	.+76     	; 0x16ae <malloc+0x96>
    1662:	21 15       	cp	r18, r1
    1664:	31 05       	cpc	r19, r1
    1666:	19 f0       	breq	.+6      	; 0x166e <malloc+0x56>
    1668:	42 17       	cp	r20, r18
    166a:	53 07       	cpc	r21, r19
    166c:	18 f4       	brcc	.+6      	; 0x1674 <malloc+0x5c>
    166e:	9a 01       	movw	r18, r20
    1670:	be 01       	movw	r22, r28
    1672:	df 01       	movw	r26, r30
    1674:	ef 01       	movw	r28, r30
    1676:	02 80       	ldd	r0, Z+2	; 0x02
    1678:	f3 81       	ldd	r31, Z+3	; 0x03
    167a:	e0 2d       	mov	r30, r0
    167c:	dc cf       	rjmp	.-72     	; 0x1636 <malloc+0x1e>
    167e:	21 15       	cp	r18, r1
    1680:	31 05       	cpc	r19, r1
    1682:	09 f1       	breq	.+66     	; 0x16c6 <malloc+0xae>
    1684:	28 1b       	sub	r18, r24
    1686:	39 0b       	sbc	r19, r25
    1688:	24 30       	cpi	r18, 0x04	; 4
    168a:	31 05       	cpc	r19, r1
    168c:	90 f4       	brcc	.+36     	; 0x16b2 <malloc+0x9a>
    168e:	12 96       	adiw	r26, 0x02	; 2
    1690:	8d 91       	ld	r24, X+
    1692:	9c 91       	ld	r25, X
    1694:	13 97       	sbiw	r26, 0x03	; 3
    1696:	61 15       	cp	r22, r1
    1698:	71 05       	cpc	r23, r1
    169a:	21 f0       	breq	.+8      	; 0x16a4 <malloc+0x8c>
    169c:	fb 01       	movw	r30, r22
    169e:	93 83       	std	Z+3, r25	; 0x03
    16a0:	82 83       	std	Z+2, r24	; 0x02
    16a2:	04 c0       	rjmp	.+8      	; 0x16ac <malloc+0x94>
    16a4:	90 93 69 03 	sts	0x0369, r25
    16a8:	80 93 68 03 	sts	0x0368, r24
    16ac:	fd 01       	movw	r30, r26
    16ae:	32 96       	adiw	r30, 0x02	; 2
    16b0:	44 c0       	rjmp	.+136    	; 0x173a <malloc+0x122>
    16b2:	fd 01       	movw	r30, r26
    16b4:	e2 0f       	add	r30, r18
    16b6:	f3 1f       	adc	r31, r19
    16b8:	81 93       	st	Z+, r24
    16ba:	91 93       	st	Z+, r25
    16bc:	22 50       	subi	r18, 0x02	; 2
    16be:	31 09       	sbc	r19, r1
    16c0:	2d 93       	st	X+, r18
    16c2:	3c 93       	st	X, r19
    16c4:	3a c0       	rjmp	.+116    	; 0x173a <malloc+0x122>
    16c6:	20 91 66 03 	lds	r18, 0x0366
    16ca:	30 91 67 03 	lds	r19, 0x0367
    16ce:	23 2b       	or	r18, r19
    16d0:	41 f4       	brne	.+16     	; 0x16e2 <malloc+0xca>
    16d2:	20 91 02 01 	lds	r18, 0x0102
    16d6:	30 91 03 01 	lds	r19, 0x0103
    16da:	30 93 67 03 	sts	0x0367, r19
    16de:	20 93 66 03 	sts	0x0366, r18
    16e2:	20 91 00 01 	lds	r18, 0x0100
    16e6:	30 91 01 01 	lds	r19, 0x0101
    16ea:	21 15       	cp	r18, r1
    16ec:	31 05       	cpc	r19, r1
    16ee:	41 f4       	brne	.+16     	; 0x1700 <malloc+0xe8>
    16f0:	2d b7       	in	r18, 0x3d	; 61
    16f2:	3e b7       	in	r19, 0x3e	; 62
    16f4:	40 91 04 01 	lds	r20, 0x0104
    16f8:	50 91 05 01 	lds	r21, 0x0105
    16fc:	24 1b       	sub	r18, r20
    16fe:	35 0b       	sbc	r19, r21
    1700:	e0 91 66 03 	lds	r30, 0x0366
    1704:	f0 91 67 03 	lds	r31, 0x0367
    1708:	e2 17       	cp	r30, r18
    170a:	f3 07       	cpc	r31, r19
    170c:	a0 f4       	brcc	.+40     	; 0x1736 <malloc+0x11e>
    170e:	2e 1b       	sub	r18, r30
    1710:	3f 0b       	sbc	r19, r31
    1712:	28 17       	cp	r18, r24
    1714:	39 07       	cpc	r19, r25
    1716:	78 f0       	brcs	.+30     	; 0x1736 <malloc+0x11e>
    1718:	ac 01       	movw	r20, r24
    171a:	4e 5f       	subi	r20, 0xFE	; 254
    171c:	5f 4f       	sbci	r21, 0xFF	; 255
    171e:	24 17       	cp	r18, r20
    1720:	35 07       	cpc	r19, r21
    1722:	48 f0       	brcs	.+18     	; 0x1736 <malloc+0x11e>
    1724:	4e 0f       	add	r20, r30
    1726:	5f 1f       	adc	r21, r31
    1728:	50 93 67 03 	sts	0x0367, r21
    172c:	40 93 66 03 	sts	0x0366, r20
    1730:	81 93       	st	Z+, r24
    1732:	91 93       	st	Z+, r25
    1734:	02 c0       	rjmp	.+4      	; 0x173a <malloc+0x122>
    1736:	e0 e0       	ldi	r30, 0x00	; 0
    1738:	f0 e0       	ldi	r31, 0x00	; 0
    173a:	cf 01       	movw	r24, r30
    173c:	df 91       	pop	r29
    173e:	cf 91       	pop	r28
    1740:	08 95       	ret

00001742 <free>:
    1742:	0f 93       	push	r16
    1744:	1f 93       	push	r17
    1746:	cf 93       	push	r28
    1748:	df 93       	push	r29
    174a:	00 97       	sbiw	r24, 0x00	; 0
    174c:	09 f4       	brne	.+2      	; 0x1750 <free+0xe>
    174e:	8c c0       	rjmp	.+280    	; 0x1868 <free+0x126>
    1750:	fc 01       	movw	r30, r24
    1752:	32 97       	sbiw	r30, 0x02	; 2
    1754:	13 82       	std	Z+3, r1	; 0x03
    1756:	12 82       	std	Z+2, r1	; 0x02
    1758:	00 91 68 03 	lds	r16, 0x0368
    175c:	10 91 69 03 	lds	r17, 0x0369
    1760:	01 15       	cp	r16, r1
    1762:	11 05       	cpc	r17, r1
    1764:	81 f4       	brne	.+32     	; 0x1786 <free+0x44>
    1766:	20 81       	ld	r18, Z
    1768:	31 81       	ldd	r19, Z+1	; 0x01
    176a:	82 0f       	add	r24, r18
    176c:	93 1f       	adc	r25, r19
    176e:	20 91 66 03 	lds	r18, 0x0366
    1772:	30 91 67 03 	lds	r19, 0x0367
    1776:	28 17       	cp	r18, r24
    1778:	39 07       	cpc	r19, r25
    177a:	79 f5       	brne	.+94     	; 0x17da <free+0x98>
    177c:	f0 93 67 03 	sts	0x0367, r31
    1780:	e0 93 66 03 	sts	0x0366, r30
    1784:	71 c0       	rjmp	.+226    	; 0x1868 <free+0x126>
    1786:	d8 01       	movw	r26, r16
    1788:	40 e0       	ldi	r20, 0x00	; 0
    178a:	50 e0       	ldi	r21, 0x00	; 0
    178c:	ae 17       	cp	r26, r30
    178e:	bf 07       	cpc	r27, r31
    1790:	50 f4       	brcc	.+20     	; 0x17a6 <free+0x64>
    1792:	12 96       	adiw	r26, 0x02	; 2
    1794:	2d 91       	ld	r18, X+
    1796:	3c 91       	ld	r19, X
    1798:	13 97       	sbiw	r26, 0x03	; 3
    179a:	ad 01       	movw	r20, r26
    179c:	21 15       	cp	r18, r1
    179e:	31 05       	cpc	r19, r1
    17a0:	09 f1       	breq	.+66     	; 0x17e4 <free+0xa2>
    17a2:	d9 01       	movw	r26, r18
    17a4:	f3 cf       	rjmp	.-26     	; 0x178c <free+0x4a>
    17a6:	9d 01       	movw	r18, r26
    17a8:	da 01       	movw	r26, r20
    17aa:	33 83       	std	Z+3, r19	; 0x03
    17ac:	22 83       	std	Z+2, r18	; 0x02
    17ae:	60 81       	ld	r22, Z
    17b0:	71 81       	ldd	r23, Z+1	; 0x01
    17b2:	86 0f       	add	r24, r22
    17b4:	97 1f       	adc	r25, r23
    17b6:	82 17       	cp	r24, r18
    17b8:	93 07       	cpc	r25, r19
    17ba:	69 f4       	brne	.+26     	; 0x17d6 <free+0x94>
    17bc:	ec 01       	movw	r28, r24
    17be:	28 81       	ld	r18, Y
    17c0:	39 81       	ldd	r19, Y+1	; 0x01
    17c2:	26 0f       	add	r18, r22
    17c4:	37 1f       	adc	r19, r23
    17c6:	2e 5f       	subi	r18, 0xFE	; 254
    17c8:	3f 4f       	sbci	r19, 0xFF	; 255
    17ca:	31 83       	std	Z+1, r19	; 0x01
    17cc:	20 83       	st	Z, r18
    17ce:	8a 81       	ldd	r24, Y+2	; 0x02
    17d0:	9b 81       	ldd	r25, Y+3	; 0x03
    17d2:	93 83       	std	Z+3, r25	; 0x03
    17d4:	82 83       	std	Z+2, r24	; 0x02
    17d6:	45 2b       	or	r20, r21
    17d8:	29 f4       	brne	.+10     	; 0x17e4 <free+0xa2>
    17da:	f0 93 69 03 	sts	0x0369, r31
    17de:	e0 93 68 03 	sts	0x0368, r30
    17e2:	42 c0       	rjmp	.+132    	; 0x1868 <free+0x126>
    17e4:	13 96       	adiw	r26, 0x03	; 3
    17e6:	fc 93       	st	X, r31
    17e8:	ee 93       	st	-X, r30
    17ea:	12 97       	sbiw	r26, 0x02	; 2
    17ec:	ed 01       	movw	r28, r26
    17ee:	49 91       	ld	r20, Y+
    17f0:	59 91       	ld	r21, Y+
    17f2:	9e 01       	movw	r18, r28
    17f4:	24 0f       	add	r18, r20
    17f6:	35 1f       	adc	r19, r21
    17f8:	e2 17       	cp	r30, r18
    17fa:	f3 07       	cpc	r31, r19
    17fc:	71 f4       	brne	.+28     	; 0x181a <free+0xd8>
    17fe:	80 81       	ld	r24, Z
    1800:	91 81       	ldd	r25, Z+1	; 0x01
    1802:	84 0f       	add	r24, r20
    1804:	95 1f       	adc	r25, r21
    1806:	02 96       	adiw	r24, 0x02	; 2
    1808:	11 96       	adiw	r26, 0x01	; 1
    180a:	9c 93       	st	X, r25
    180c:	8e 93       	st	-X, r24
    180e:	82 81       	ldd	r24, Z+2	; 0x02
    1810:	93 81       	ldd	r25, Z+3	; 0x03
    1812:	13 96       	adiw	r26, 0x03	; 3
    1814:	9c 93       	st	X, r25
    1816:	8e 93       	st	-X, r24
    1818:	12 97       	sbiw	r26, 0x02	; 2
    181a:	e0 e0       	ldi	r30, 0x00	; 0
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	d8 01       	movw	r26, r16
    1820:	12 96       	adiw	r26, 0x02	; 2
    1822:	8d 91       	ld	r24, X+
    1824:	9c 91       	ld	r25, X
    1826:	13 97       	sbiw	r26, 0x03	; 3
    1828:	00 97       	sbiw	r24, 0x00	; 0
    182a:	19 f0       	breq	.+6      	; 0x1832 <free+0xf0>
    182c:	f8 01       	movw	r30, r16
    182e:	8c 01       	movw	r16, r24
    1830:	f6 cf       	rjmp	.-20     	; 0x181e <free+0xdc>
    1832:	8d 91       	ld	r24, X+
    1834:	9c 91       	ld	r25, X
    1836:	98 01       	movw	r18, r16
    1838:	2e 5f       	subi	r18, 0xFE	; 254
    183a:	3f 4f       	sbci	r19, 0xFF	; 255
    183c:	82 0f       	add	r24, r18
    183e:	93 1f       	adc	r25, r19
    1840:	20 91 66 03 	lds	r18, 0x0366
    1844:	30 91 67 03 	lds	r19, 0x0367
    1848:	28 17       	cp	r18, r24
    184a:	39 07       	cpc	r19, r25
    184c:	69 f4       	brne	.+26     	; 0x1868 <free+0x126>
    184e:	30 97       	sbiw	r30, 0x00	; 0
    1850:	29 f4       	brne	.+10     	; 0x185c <free+0x11a>
    1852:	10 92 69 03 	sts	0x0369, r1
    1856:	10 92 68 03 	sts	0x0368, r1
    185a:	02 c0       	rjmp	.+4      	; 0x1860 <free+0x11e>
    185c:	13 82       	std	Z+3, r1	; 0x03
    185e:	12 82       	std	Z+2, r1	; 0x02
    1860:	10 93 67 03 	sts	0x0367, r17
    1864:	00 93 66 03 	sts	0x0366, r16
    1868:	df 91       	pop	r29
    186a:	cf 91       	pop	r28
    186c:	1f 91       	pop	r17
    186e:	0f 91       	pop	r16
    1870:	08 95       	ret

00001872 <do_random>:
    1872:	8f 92       	push	r8
    1874:	9f 92       	push	r9
    1876:	af 92       	push	r10
    1878:	bf 92       	push	r11
    187a:	cf 92       	push	r12
    187c:	df 92       	push	r13
    187e:	ef 92       	push	r14
    1880:	ff 92       	push	r15
    1882:	cf 93       	push	r28
    1884:	df 93       	push	r29
    1886:	ec 01       	movw	r28, r24
    1888:	68 81       	ld	r22, Y
    188a:	79 81       	ldd	r23, Y+1	; 0x01
    188c:	8a 81       	ldd	r24, Y+2	; 0x02
    188e:	9b 81       	ldd	r25, Y+3	; 0x03
    1890:	61 15       	cp	r22, r1
    1892:	71 05       	cpc	r23, r1
    1894:	81 05       	cpc	r24, r1
    1896:	91 05       	cpc	r25, r1
    1898:	21 f4       	brne	.+8      	; 0x18a2 <do_random+0x30>
    189a:	64 e2       	ldi	r22, 0x24	; 36
    189c:	79 ed       	ldi	r23, 0xD9	; 217
    189e:	8b e5       	ldi	r24, 0x5B	; 91
    18a0:	97 e0       	ldi	r25, 0x07	; 7
    18a2:	2d e1       	ldi	r18, 0x1D	; 29
    18a4:	33 ef       	ldi	r19, 0xF3	; 243
    18a6:	41 e0       	ldi	r20, 0x01	; 1
    18a8:	50 e0       	ldi	r21, 0x00	; 0
    18aa:	0e 94 cd 0a 	call	0x159a	; 0x159a <__divmodsi4>
    18ae:	49 01       	movw	r8, r18
    18b0:	5a 01       	movw	r10, r20
    18b2:	9b 01       	movw	r18, r22
    18b4:	ac 01       	movw	r20, r24
    18b6:	a7 ea       	ldi	r26, 0xA7	; 167
    18b8:	b1 e4       	ldi	r27, 0x41	; 65
    18ba:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <__muluhisi3>
    18be:	6b 01       	movw	r12, r22
    18c0:	7c 01       	movw	r14, r24
    18c2:	ac ee       	ldi	r26, 0xEC	; 236
    18c4:	b4 ef       	ldi	r27, 0xF4	; 244
    18c6:	a5 01       	movw	r20, r10
    18c8:	94 01       	movw	r18, r8
    18ca:	0e 94 b0 0c 	call	0x1960	; 0x1960 <__mulohisi3>
    18ce:	dc 01       	movw	r26, r24
    18d0:	cb 01       	movw	r24, r22
    18d2:	8c 0d       	add	r24, r12
    18d4:	9d 1d       	adc	r25, r13
    18d6:	ae 1d       	adc	r26, r14
    18d8:	bf 1d       	adc	r27, r15
    18da:	b7 ff       	sbrs	r27, 7
    18dc:	03 c0       	rjmp	.+6      	; 0x18e4 <do_random+0x72>
    18de:	01 97       	sbiw	r24, 0x01	; 1
    18e0:	a1 09       	sbc	r26, r1
    18e2:	b0 48       	sbci	r27, 0x80	; 128
    18e4:	88 83       	st	Y, r24
    18e6:	99 83       	std	Y+1, r25	; 0x01
    18e8:	aa 83       	std	Y+2, r26	; 0x02
    18ea:	bb 83       	std	Y+3, r27	; 0x03
    18ec:	bc 01       	movw	r22, r24
    18ee:	cd 01       	movw	r24, r26
    18f0:	9f 77       	andi	r25, 0x7F	; 127
    18f2:	df 91       	pop	r29
    18f4:	cf 91       	pop	r28
    18f6:	ff 90       	pop	r15
    18f8:	ef 90       	pop	r14
    18fa:	df 90       	pop	r13
    18fc:	cf 90       	pop	r12
    18fe:	bf 90       	pop	r11
    1900:	af 90       	pop	r10
    1902:	9f 90       	pop	r9
    1904:	8f 90       	pop	r8
    1906:	08 95       	ret

00001908 <random_r>:
    1908:	0e 94 39 0c 	call	0x1872	; 0x1872 <do_random>
    190c:	08 95       	ret

0000190e <random>:
    190e:	86 e0       	ldi	r24, 0x06	; 6
    1910:	91 e0       	ldi	r25, 0x01	; 1
    1912:	0e 94 39 0c 	call	0x1872	; 0x1872 <do_random>
    1916:	08 95       	ret

00001918 <srandom>:
    1918:	60 93 06 01 	sts	0x0106, r22
    191c:	70 93 07 01 	sts	0x0107, r23
    1920:	80 93 08 01 	sts	0x0108, r24
    1924:	90 93 09 01 	sts	0x0109, r25
    1928:	08 95       	ret

0000192a <memcmp>:
    192a:	fb 01       	movw	r30, r22
    192c:	dc 01       	movw	r26, r24
    192e:	04 c0       	rjmp	.+8      	; 0x1938 <memcmp+0xe>
    1930:	8d 91       	ld	r24, X+
    1932:	01 90       	ld	r0, Z+
    1934:	80 19       	sub	r24, r0
    1936:	21 f4       	brne	.+8      	; 0x1940 <memcmp+0x16>
    1938:	41 50       	subi	r20, 0x01	; 1
    193a:	50 40       	sbci	r21, 0x00	; 0
    193c:	c8 f7       	brcc	.-14     	; 0x1930 <memcmp+0x6>
    193e:	88 1b       	sub	r24, r24
    1940:	99 0b       	sbc	r25, r25
    1942:	08 95       	ret

00001944 <strcat>:
    1944:	fb 01       	movw	r30, r22
    1946:	dc 01       	movw	r26, r24
    1948:	0d 90       	ld	r0, X+
    194a:	00 20       	and	r0, r0
    194c:	e9 f7       	brne	.-6      	; 0x1948 <strcat+0x4>
    194e:	11 97       	sbiw	r26, 0x01	; 1
    1950:	01 90       	ld	r0, Z+
    1952:	0d 92       	st	X+, r0
    1954:	00 20       	and	r0, r0
    1956:	e1 f7       	brne	.-8      	; 0x1950 <strcat+0xc>
    1958:	08 95       	ret

0000195a <__mulshisi3>:
    195a:	b7 ff       	sbrs	r27, 7
    195c:	0c 94 ec 0a 	jmp	0x15d8	; 0x15d8 <__muluhisi3>

00001960 <__mulohisi3>:
    1960:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <__muluhisi3>
    1964:	82 1b       	sub	r24, r18
    1966:	93 0b       	sbc	r25, r19
    1968:	08 95       	ret

0000196a <__do_global_dtors>:
    196a:	10 e0       	ldi	r17, 0x00	; 0
    196c:	c7 e3       	ldi	r28, 0x37	; 55
    196e:	d0 e0       	ldi	r29, 0x00	; 0
    1970:	04 c0       	rjmp	.+8      	; 0x197a <__do_global_dtors+0x10>
    1972:	fe 01       	movw	r30, r28
    1974:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <__tablejump2__>
    1978:	21 96       	adiw	r28, 0x01	; 1
    197a:	c8 33       	cpi	r28, 0x38	; 56
    197c:	d1 07       	cpc	r29, r17
    197e:	c9 f7       	brne	.-14     	; 0x1972 <__do_global_dtors+0x8>
    1980:	f8 94       	cli

00001982 <__stop_program>:
    1982:	ff cf       	rjmp	.-2      	; 0x1982 <__stop_program>
